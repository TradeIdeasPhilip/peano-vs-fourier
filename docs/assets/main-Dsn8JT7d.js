(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))r(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const i of o.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&r(i)}).observe(document,{childList:!0,subtree:!0});function n(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function r(s){if(s.ep)return;s.ep=!0;const o=n(s);fetch(s.href,o)}})();function B1(Q){return Q&&Q.__esModule&&Object.prototype.hasOwnProperty.call(Q,"default")?Q.default:Q}var W={},$1={},O1;function Y1(){return O1||(O1=1,(function(Q){Object.defineProperty(Q,"__esModule",{value:!0}),Q.countMap=Q.Random=Q.phi=Q.radiansPerDegree=Q.degreesPerRadian=Q.FULL_CIRCLE=Q.FIGURE_SPACE=Q.NON_BREAKING_SPACE=Q.MIN_DATE=Q.MAX_DATE=Q.csvStringToArray=void 0,Q.assertClass=e,Q.assertNonNullable=n,Q.sleep=r,Q.testXml=s,Q.parseXml=o,Q.followPath=i,Q.getAttribute=a,Q.parseFloatX=c,Q.parseIntX=h,Q.parseTimeT=l,Q.pickAny=d,Q.pick=f,Q.take=y,Q.filterMap=p,Q.makePromise=g,Q.dateIsValid=M,Q.angleBetween=k,Q.positiveModulo=E,Q.rotateArray=T,Q.rectUnion=S,Q.rectAddPoint=A,Q.dateToFileName=z,Q.lerp=O,Q.assertFinite=_,Q.shuffleArray=q,Q.zip=U,Q.count=Z,Q.initializedArray=J,Q.sum=i1,Q.makeLinear=L1,Q.makeBoundedLinear=f1,Q.polarToRectangular=k1,Q.permutations=y1,Q.gcd=r1,Q.lcm=E1;function e(m,x,L="Assertion Failed."){const w=F=>{throw new Error(`${L}  Expected type:  ${x.name}.  Found type:  ${F}.`)};if(m===null)w("null");else if(typeof m!="object")w(typeof m);else if(!(m instanceof x))w(m.constructor.name);else return m;throw new Error("wtf")}function n(m){if(m==null)throw new Error("wtf");return m}function r(m){return new Promise(x=>{setTimeout(x,m)})}function s(m){const L=new DOMParser().parseFromString(m,"application/xml");for(const w of Array.from(L.querySelectorAll("parsererror")))if(w instanceof HTMLElement)return{error:w};return{parsed:L}}function o(m){if(m!==void 0){const{parsed:x}=s(m);return x?.documentElement}}function i(m,...x){for(const L of x){if(m===void 0)return;if(typeof L=="number")m=m.children[L];else{const w=m.getElementsByTagName(L);if(w.length!=1)return;m=w[0]}}return m}function a(m,x,...L){if(x=i(x,...L),x!==void 0&&x.hasAttribute(m))return x.getAttribute(m)??void 0}function c(m){if(m==null)return;const x=+m;if(isFinite(x))return x}function h(m){const x=c(m);if(x!==void 0)return x>Number.MAX_SAFE_INTEGER||x<Number.MIN_SAFE_INTEGER||x!=Math.floor(x)?void 0:x}function l(m){if(typeof m=="string"&&(m=h(m)),m!=null&&!(m<=0))return new Date(m*1e3)}const u=m=>{const x=/(,|\r?\n|\r|^)(?:"([^"]*(?:""[^"]*)*)"|([^,\r\n]*))/gi,L=[[]];let w;for(;w=x.exec(m);)w[1].length&&w[1]!==","&&L.push([]),L[L.length-1].push(w[2]!==void 0?w[2].replace(/""/g,'"'):w[3]);return L};Q.csvStringToArray=u;function d(m){const x=m.values().next();if(!x.done)return x.value}function f(m){if(m.length==0)throw new Error("wtf");return m[Math.random()*m.length|0]}function y(m){if(m.length<1)throw new Error("wtf");const x=Math.random()*m.length|0;return m.splice(x,1)[0]}function p(m,x){const L=[];return m.forEach((w,F)=>{const P=x(w,F);P!==void 0&&L.push(P)}),L}function g(){let m,x;return{promise:new Promise((w,F)=>{m=w,x=F}),resolve:m,reject:x}}Q.MAX_DATE=new Date(864e13),Q.MIN_DATE=new Date(-864e13);function M(m){return isFinite(m.getTime())}Q.NON_BREAKING_SPACE=" ",Q.FIGURE_SPACE=" ",Q.FULL_CIRCLE=2*Math.PI,Q.degreesPerRadian=360/Q.FULL_CIRCLE,Q.radiansPerDegree=Q.FULL_CIRCLE/360,Q.phi=(1+Math.sqrt(5))/2;function k(m,x){const L=E(m,Q.FULL_CIRCLE);let F=E(x,Q.FULL_CIRCLE)-L;const P=Q.FULL_CIRCLE/2;if(F>P?F-=Q.FULL_CIRCLE:F<-P&&(F+=Q.FULL_CIRCLE),Math.abs(F)>P)throw new Error("wtf");return F}function E(m,x){const L=m%x;return L<0?L+Math.abs(x):L}function T(m,x){if((x|0)!=x)throw new Error(`invalid input: ${x}`);return x=E(x,m.length),x==0?m:[...m.slice(x),...m.slice(0,x)]}class ${constructor(){throw new Error("wtf")}static sfc32(x,L,w,F){function P(){x|=0,L|=0,w|=0,F|=0;let Y=(x+L|0)+F|0;return F=F+1|0,x=L^L>>>9,L=w+(w<<3)|0,w=w<<21|w>>>11,w=w+Y|0,(Y>>>0)/4294967296}const H=P;return Object.defineProperty(H,"currentSeed",{get(){return JSON.stringify([x,L,w,F])}}),H}static#t=42;static seedIsValid(x){try{return this.create(x),!0}catch{return!1}}static create(x=this.newSeed()){console.info(x);const L=JSON.parse(x);if(!(L instanceof Array))throw new Error("invalid input");if(L.length!=4)throw new Error("invalid input");const[w,F,P,H]=L;if(!(typeof w=="number"&&typeof F=="number"&&typeof P=="number"&&typeof H=="number"))throw new Error("invalid input");return this.sfc32(w,F,P,H)}static newSeed(){const x=[];return x.push(Date.now()|0),x.push(this.#t++|0),x.push(Math.random()*2**31|0),x.push(performance.now()*1e4|0),JSON.stringify(x)}static fromString(x){try{return this.create(x)}catch{return this.create(this.anyStringToSeed(x))}}static anyStringToSeed(x){function L(P,H){return(P<<H|P>>>32-H)>>>0}const w=[2654435769,608135816,2242054355,320440878];return new TextEncoder().encode(x).forEach(P=>{w[0]^=P,w[0]=L(w[0],3),w[1]^=P,w[1]=L(w[1],5),w[2]^=P,w[2]=L(w[2],7),w[3]^=P,w[3]=L(w[3],11)}),w[0]^=L(w[1],7),w[1]^=L(w[2],11),w[2]^=L(w[3],13),w[3]^=L(w[0],17),JSON.stringify(w)}static test(){const w=[this.create()];for(;w.length<=10;){for(let P=0;P<20;P++){const H=w.map(Y=>Y());for(let Y=1;Y<H.length;Y++)if(H[Y]!==H[0]){debugger;throw new Error("wtf")}}const F=f(w).currentSeed;w.forEach(P=>{if(P.currentSeed!=F){debugger;throw new Error("wtf")}}),w.push(this.create(F))}}}Q.Random=$;function S(m,x){const L=Math.min(m.x,x.x),w=Math.min(m.y,x.y),F=Math.max(m.x+m.width,x.x+x.width),P=Math.max(m.y+m.height,x.y+x.height),H=F-L,Y=P-w;return{x:L,y:w,width:H,height:Y}}function A(m,x,L){return S(m,{x,y:L,width:0,height:0})}function z(m){return isNaN(m.getTime())?"0000⸱00⸱00 00⦂00⦂00":`${m.getFullYear().toString().padStart(4,"0")}⸱${(m.getMonth()+1).toString().padStart(2,"0")}⸱${m.getDate().toString().padStart(2,"0")} ${m.getHours().toString().padStart(2,"0")}⦂${m.getMinutes().toString().padStart(2,"0")}⦂${m.getSeconds().toString().padStart(2,"0")}`}function O(m,x,L){return m+(x-m)*L}function _(...m){m.forEach(x=>{if(!Number.isFinite(x))throw new Error("wtf")})}function q(m){for(let x=m.length-1;x>0;x--){const L=Math.floor(Math.random()*(x+1));[m[x],m[L]]=[m[L],m[x]]}return m}function*U(...m){const x=m.map(L=>L[Symbol.iterator]());for(;;){const L=x.map(w=>w.next());if(L.some(({done:w})=>w))break;yield L.map(({value:w})=>w)}}function*Z(m=0,x=1/0,L=1){for(let w=m;w<x;w+=L)yield w}function J(m,x){const L=[];for(let w=0;w<m;w++)L.push(x(w));return L}Q.countMap=J;function i1(m){return m.reduce((x,L)=>x+L,0)}function L1(m,x,L,w){const F=(w-x)/(L-m);return function(P){return(P-m)*F+x}}function f1(m,x,L,w){L<m&&([m,x,L,w]=[L,w,m,x]);const F=(w-x)/(L-m);return function(P){return P<=m?x:P>=L?w:(P-m)*F+x}}function k1(m,x){return{x:Math.cos(x)*m,y:Math.sin(x)*m}}function*y1(m,x=[]){if(m.length==0)yield x;else for(let L=0;L<m.length;L++){const w=m[L],F=[...x,w],P=[...m.slice(0,L),...m.slice(L+1)];yield*y1(P,F)}}function r1(m,x){return x?r1(x,m%x):m}function E1(m,x){return m*x/r1(m,x)}})($1)),$1}var R1;function a0(){if(R1)return W;R1=1,Object.defineProperty(W,"__esModule",{value:!0}),W.AnimationLoop=void 0,W.getById=e,W.selectorQueryAll=n,W.querySelectorAll=r,W.selectorQuery=s,W.querySelector=o,W.loadDateTimeLocal=i,W.getBlobFromCanvas=a,W.getAudioBalanceControl=c,W.getHashInfo=h,W.createElementFromHTML=l,W.download=u,W.getDataUrl=f;const Q=Y1();function e(y,p){const g=document.getElementById(y);if(!g)throw new Error("Could not find element with id "+y+".  Expected type:  "+p.name);if(g instanceof p)return g;throw new Error("Element with id "+y+" has type "+g.constructor.name+".  Expected type:  "+p.name)}function n(y,p,g=1,M=1/0,k=document){const E=[];if(k.querySelectorAll(y).forEach(T=>{E.push((0,Q.assertClass)(T,p))}),E.length<g||E.length>M)throw new Error(`Expecting "${y}" to return [${g} - ${M}] instances of ${p.name}, found ${E.length}.`);return E}function r(y,p,g=1,M=1/0,k=document){const E=[];if(k.querySelectorAll(y).forEach(T=>{E.push((0,Q.assertClass)(T,p))}),E.length<g||E.length>M)throw new Error(`Expecting "${y}" to return [${g} - ${M}] instances of ${p.name}, found ${E.length}.`);return E}function s(y,p,g=document){return n(y,p,1,1,g)[0]}function o(y,p,g=document){return r(y,p,1,1,g)[0]}function i(y,p,g="milliseconds"){let M;switch(g){case"minutes":{M=p.getSeconds()*1e3+p.getMilliseconds();break}case"seconds":{M=p.getMilliseconds();break}case"milliseconds":{M=0;break}default:throw new Error("wtf")}y.valueAsNumber=+p-p.getTimezoneOffset()*6e4-M}function a(y){const{reject:p,resolve:g,promise:M}=(0,Q.makePromise)();return y.toBlob(k=>{k?g(k):p(new Error("blob is null!"))}),M}function c(y){const p=new AudioContext,g=p.createMediaElementSource(y),M=new StereoPannerNode(p,{pan:0});return g.connect(M).connect(p.destination),k=>{M.pan.value=k}}function h(){const y=new Map;return/^#?(.*)$/.exec(location.hash.replace("+","%20"))[1].split("&").forEach(M=>{const k=M.split("=",2);if(k.length==2){const E=decodeURIComponent(k[0]),T=decodeURIComponent(k[1]);y.set(E,T)}}),y}function l(y,p){var g=document.createElement("div");return g.innerHTML=y.trim(),(0,Q.assertClass)(g.firstChild,p,"createElementFromHTML:")}function u(y,p){var g=document.createElement("a");if(g.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(p)),g.setAttribute("download",y),document.createEvent){var M=document.createEvent("MouseEvents");M.initEvent("click",!0,!0),g.dispatchEvent(M)}else g.click()}class d{onWake;constructor(p){this.onWake=p,this.callback=this.callback.bind(this),requestAnimationFrame(this.callback)}#t=!1;cancel(){this.#t=!0}callback(p){this.#t||(requestAnimationFrame(this.callback),this.onWake(p))}}W.AnimationLoop=d;async function f(y){const p=document.createElement("img");p.src=y,await p.decode();const g=p.naturalHeight,M=p.naturalWidth;if(g==0||M==0)throw new Error("problem with image");const k=document.createElement("canvas");k.width=M,k.height=g;const E=k.getContext("2d");if(!E)throw new Error("wtf");return E.drawImage(p,0,0,k.width,k.height),k.toDataURL()}return W}var g1=a0(),b=Y1();function B(Q,e,n){return new DOMPoint(Q,e).matrixTransform(n)}function q1(Q,e,n,r=.5,s=.5){const o=Q.width/Q.height,i=e.width/e.height;let a,c;switch(n){case"meet":case"srcRect fits completely into destRect":{o>i?(a=e.width/Q.width,c=a):(c=e.height/Q.height,a=c);break}case"slice":case"srcRect completely covers destRect":{o>i?(c=e.height/Q.height,a=c):(a=e.width/Q.width,c=a);break}default:throw new Error("wtf")}const h=-Q.x*a+r*(e.width-Q.width*a)+e.x,l=-Q.y*c+s*(e.height-Q.height*c)+e.y;return new DOMMatrix().translate(h,l).scale(a,c)}function c0(){{const Q={x:-1,y:-1,width:2,height:2},e={x:0,y:0,height:244,width:325},n=q1(Q,e,"meet");[{x:Q.x,y:Q.y},{x:Q.x+Q.width,y:Q.y},{x:Q.x+Q.width,y:Q.y+Q.height},{x:Q.x,y:Q.y+Q.height}].forEach(({x:s,y:o})=>{const i=B(s,o,n);if(i.x<e.x||i.x>e.x+e.width||i.y<e.y||i.y>e.y+e.height)throw new Error(`Test 1 failed: Point (${i.x}, ${i.y}) is outside destination (${e.x}, ${e.y}, ${e.width}, ${e.height})`)})}{const Q={x:-1,y:-1,width:2,height:2},e={x:0,y:0,height:325,width:244},n=q1(Q,e,"meet");[{x:Q.x,y:Q.y},{x:Q.x+Q.width,y:Q.y},{x:Q.x+Q.width,y:Q.y+Q.height},{x:Q.x,y:Q.y+Q.height}].forEach(({x:s,y:o})=>{const i=B(s,o,n);if(i.x<e.x||i.x>e.x+e.width||i.y<e.y||i.y>e.y+e.height)throw new Error(`Test 2 failed: Point (${i.x}, ${i.y}) is outside destination (${e.x}, ${e.y}, ${e.width}, ${e.height})`)})}}c0();var A1,D1;function h0(){if(D1)return A1;D1=1,A1=n;var Q={a:7,c:6,h:1,l:2,m:2,q:4,s:4,t:2,v:1,z:0},e=/([astvzqmhlc])([^astvzqmhlc]*)/ig;function n(o){var i=[];return o.replace(e,function(a,c,h){var l=c.toLowerCase();for(h=s(h),l=="m"&&h.length>2&&(i.push([c].concat(h.splice(0,2))),l="l",c=c=="m"?"l":"L");;){if(h.length==Q[l])return h.unshift(c),i.push(h);if(h.length<Q[l])throw new Error("malformed path data");i.push([c].concat(h.splice(0,Q[l])))}}),i}var r=/-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;function s(o){var i=o.match(r);return i?i.map(Number):[]}return A1}var l0=h0();const u0=B1(l0);var b1,X1;function d0(){if(X1)return b1;X1=1,b1=Q;function Q(e){var n=0,r=0,s=0,o=0;return e.map(function(i){i=i.slice();var a=i[0],c=a.toUpperCase();if(a!=c)switch(i[0]=c,a){case"a":i[6]+=s,i[7]+=o;break;case"v":i[1]+=o;break;case"h":i[1]+=s;break;default:for(var h=1;h<i.length;)i[h++]+=s,i[h++]+=o}switch(c){case"Z":s=n,o=r;break;case"H":s=i[1];break;case"V":o=i[1];break;case"M":s=n=i[1],o=r=i[2];break;default:s=i[i.length-2],o=i[i.length-1]}return i})}return b1}var f0=d0();const y0=B1(f0);var m0=(function(){function Q(e,n){var r=[],s=!0,o=!1,i=void 0;try{for(var a=e[Symbol.iterator](),c;!(s=(c=a.next()).done)&&(r.push(c.value),!(n&&r.length===n));s=!0);}catch(h){o=!0,i=h}finally{try{!s&&a.return&&a.return()}finally{if(o)throw i}}return r}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return Q(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}})(),l1=Math.PI*2,S1=function(e,n,r,s,o,i,a){var c=e.x,h=e.y;c*=n,h*=r;var l=s*c-o*h,u=o*c+s*h;return{x:l+i,y:u+a}},p0=function(e,n){var r=n===1.5707963267948966?.551915024494:n===-1.5707963267948966?-.551915024494:1.3333333333333333*Math.tan(n/4),s=Math.cos(e),o=Math.sin(e),i=Math.cos(e+n),a=Math.sin(e+n);return[{x:s-o*r,y:o+s*r},{x:i+a*r,y:a-i*r},{x:i,y:a}]},U1=function(e,n,r,s){var o=e*s-n*r<0?-1:1,i=e*r+n*s;return i>1&&(i=1),i<-1&&(i=-1),o*Math.acos(i)},g0=function(e,n,r,s,o,i,a,c,h,l,u,d){var f=Math.pow(o,2),y=Math.pow(i,2),p=Math.pow(u,2),g=Math.pow(d,2),M=f*y-f*g-y*p;M<0&&(M=0),M/=f*g+y*p,M=Math.sqrt(M)*(a===c?-1:1);var k=M*o/i*d,E=M*-i/o*u,T=l*k-h*E+(e+r)/2,$=h*k+l*E+(n+s)/2,S=(u-k)/o,A=(d-E)/i,z=(-u-k)/o,O=(-d-E)/i,_=U1(1,0,S,A),q=U1(S,A,z,O);return c===0&&q>0&&(q-=l1),c===1&&q<0&&(q+=l1),[T,$,_,q]},x0=function(e){var n=e.px,r=e.py,s=e.cx,o=e.cy,i=e.rx,a=e.ry,c=e.xAxisRotation,h=c===void 0?0:c,l=e.largeArcFlag,u=l===void 0?0:l,d=e.sweepFlag,f=d===void 0?0:d,y=[];if(i===0||a===0)return[];var p=Math.sin(h*l1/360),g=Math.cos(h*l1/360),M=g*(n-s)/2+p*(r-o)/2,k=-p*(n-s)/2+g*(r-o)/2;if(M===0&&k===0)return[];i=Math.abs(i),a=Math.abs(a);var E=Math.pow(M,2)/Math.pow(i,2)+Math.pow(k,2)/Math.pow(a,2);E>1&&(i*=Math.sqrt(E),a*=Math.sqrt(E));var T=g0(n,r,s,o,i,a,u,f,p,g,M,k),$=m0(T,4),S=$[0],A=$[1],z=$[2],O=$[3],_=Math.abs(O)/(l1/4);Math.abs(1-_)<1e-7&&(_=1);var q=Math.max(Math.ceil(_),1);O/=q;for(var U=0;U<q;U++)y.push(p0(z,O)),z+=O;return y.map(function(Z){var J=S1(Z[0],i,a,g,p,S,A),i1=J.x,L1=J.y,f1=S1(Z[1],i,a,g,p,S,A),k1=f1.x,y1=f1.y,r1=S1(Z[2],i,a,g,p,S,A),E1=r1.x,m=r1.y;return{x1:i1,y1:L1,x2:k1,y2:y1,x:E1,y:m}})};function M0(Q){for(var e,n=[],r=0,s=0,o=0,i=0,a=null,c=null,h=0,l=0,u=0,d=Q.length;u<d;u++){var f=Q[u],y=f[0];switch(y){case"M":o=f[1],i=f[2];break;case"A":var p=x0({px:h,py:l,cx:f[6],cy:f[7],rx:f[1],ry:f[2],xAxisRotation:f[3],largeArcFlag:f[4],sweepFlag:f[5]});if(!p.length)continue;for(var g=0,M;g<p.length;g++)M=p[g],f=["C",M.x1,M.y1,M.x2,M.y2,M.x,M.y],g<p.length-1&&n.push(f);break;case"S":var k=h,E=l;(e=="C"||e=="S")&&(k+=k-r,E+=E-s),f=["C",k,E,f[1],f[2],f[3],f[4]];break;case"T":e=="Q"||e=="T"?(a=h*2-a,c=l*2-c):(a=h,c=l),f=W1(h,l,a,c,f[1],f[2]);break;case"Q":a=f[1],c=f[2],f=W1(h,l,f[1],f[2],f[3],f[4]);break;case"L":f=m1(h,l,f[1],f[2]);break;case"H":f=m1(h,l,f[1],l);break;case"V":f=m1(h,l,h,f[1]);break;case"Z":f=m1(h,l,o,i);break}e=y,h=f[f.length-2],l=f[f.length-1],f.length>4?(r=f[f.length-4],s=f[f.length-3]):(r=h,s=l),n.push(f)}return n}function m1(Q,e,n,r){return["C",Q,e,n,r,n,r]}function W1(Q,e,n,r,s,o){return["C",Q/3+2/3*n,e/3+2/3*r,s/3+2/3*n,o/3+2/3*r,s,o]}const{abs:o1,cos:t1,sin:s1,acos:v0,atan2:Q1,sqrt:e1,pow:G}=Math;function a1(Q){return Q<0?-G(-Q,1/3):G(Q,1/3)}const K1=Math.PI,p1=2*K1,n1=K1/2,w0=1e-6,C1=Number.MAX_SAFE_INTEGER||9007199254740991,z1=Number.MIN_SAFE_INTEGER||-9007199254740991,L0={x:0,y:0,z:0},v={Tvalues:[-.06405689286260563,.06405689286260563,-.1911188674736163,.1911188674736163,-.3150426796961634,.3150426796961634,-.4337935076260451,.4337935076260451,-.5454214713888396,.5454214713888396,-.6480936519369755,.6480936519369755,-.7401241915785544,.7401241915785544,-.820001985973903,.820001985973903,-.8864155270044011,.8864155270044011,-.9382745520027328,.9382745520027328,-.9747285559713095,.9747285559713095,-.9951872199970213,.9951872199970213],Cvalues:[.12793819534675216,.12793819534675216,.1258374563468283,.1258374563468283,.12167047292780339,.12167047292780339,.1155056680537256,.1155056680537256,.10744427011596563,.10744427011596563,.09761865210411388,.09761865210411388,.08619016153195327,.08619016153195327,.0733464814110803,.0733464814110803,.05929858491543678,.05929858491543678,.04427743881741981,.04427743881741981,.028531388628933663,.028531388628933663,.0123412297999872,.0123412297999872],arcfn:function(Q,e){const n=e(Q);let r=n.x*n.x+n.y*n.y;return typeof n.z<"u"&&(r+=n.z*n.z),e1(r)},compute:function(Q,e,n){if(Q===0)return e[0].t=0,e[0];const r=e.length-1;if(Q===1)return e[r].t=1,e[r];const s=1-Q;let o=e;if(r===0)return e[0].t=Q,e[0];if(r===1){const a={x:s*o[0].x+Q*o[1].x,y:s*o[0].y+Q*o[1].y,t:Q};return n&&(a.z=s*o[0].z+Q*o[1].z),a}if(r<4){let a=s*s,c=Q*Q,h,l,u,d=0;r===2?(o=[o[0],o[1],o[2],L0],h=a,l=s*Q*2,u=c):r===3&&(h=a*s,l=a*Q*3,u=s*c*3,d=Q*c);const f={x:h*o[0].x+l*o[1].x+u*o[2].x+d*o[3].x,y:h*o[0].y+l*o[1].y+u*o[2].y+d*o[3].y,t:Q};return n&&(f.z=h*o[0].z+l*o[1].z+u*o[2].z+d*o[3].z),f}const i=JSON.parse(JSON.stringify(e));for(;i.length>1;){for(let a=0;a<i.length-1;a++)i[a]={x:i[a].x+(i[a+1].x-i[a].x)*Q,y:i[a].y+(i[a+1].y-i[a].y)*Q},typeof i[a].z<"u"&&(i[a].z=i[a].z+(i[a+1].z-i[a].z)*Q);i.splice(i.length-1,1)}return i[0].t=Q,i[0]},computeWithRatios:function(Q,e,n,r){const s=1-Q,o=n,i=e;let a=o[0],c=o[1],h=o[2],l=o[3],u;if(a*=s,c*=Q,i.length===2)return u=a+c,{x:(a*i[0].x+c*i[1].x)/u,y:(a*i[0].y+c*i[1].y)/u,z:r?(a*i[0].z+c*i[1].z)/u:!1,t:Q};if(a*=s,c*=2*s,h*=Q*Q,i.length===3)return u=a+c+h,{x:(a*i[0].x+c*i[1].x+h*i[2].x)/u,y:(a*i[0].y+c*i[1].y+h*i[2].y)/u,z:r?(a*i[0].z+c*i[1].z+h*i[2].z)/u:!1,t:Q};if(a*=s,c*=1.5*s,h*=3*s,l*=Q*Q*Q,i.length===4)return u=a+c+h+l,{x:(a*i[0].x+c*i[1].x+h*i[2].x+l*i[3].x)/u,y:(a*i[0].y+c*i[1].y+h*i[2].y+l*i[3].y)/u,z:r?(a*i[0].z+c*i[1].z+h*i[2].z+l*i[3].z)/u:!1,t:Q}},derive:function(Q,e){const n=[];for(let r=Q,s=r.length,o=s-1;s>1;s--,o--){const i=[];for(let a=0,c;a<o;a++)c={x:o*(r[a+1].x-r[a].x),y:o*(r[a+1].y-r[a].y)},e&&(c.z=o*(r[a+1].z-r[a].z)),i.push(c);n.push(i),r=i}return n},between:function(Q,e,n){return e<=Q&&Q<=n||v.approximately(Q,e)||v.approximately(Q,n)},approximately:function(Q,e,n){return o1(Q-e)<=(n||w0)},length:function(Q){const n=v.Tvalues.length;let r=0;for(let s=0,o;s<n;s++)o=.5*v.Tvalues[s]+.5,r+=v.Cvalues[s]*v.arcfn(o,Q);return .5*r},map:function(Q,e,n,r,s){const o=n-e,i=s-r,a=Q-e,c=a/o;return r+i*c},lerp:function(Q,e,n){const r={x:e.x+Q*(n.x-e.x),y:e.y+Q*(n.y-e.y)};return e.z!==void 0&&n.z!==void 0&&(r.z=e.z+Q*(n.z-e.z)),r},pointToString:function(Q){let e=Q.x+"/"+Q.y;return typeof Q.z<"u"&&(e+="/"+Q.z),e},pointsToString:function(Q){return"["+Q.map(v.pointToString).join(", ")+"]"},copy:function(Q){return JSON.parse(JSON.stringify(Q))},angle:function(Q,e,n){const r=e.x-Q.x,s=e.y-Q.y,o=n.x-Q.x,i=n.y-Q.y,a=r*i-s*o,c=r*o+s*i;return Q1(a,c)},round:function(Q,e){const n=""+Q,r=n.indexOf(".");return parseFloat(n.substring(0,r+1+e))},dist:function(Q,e){const n=Q.x-e.x,r=Q.y-e.y;return e1(n*n+r*r)},closest:function(Q,e){let n=G(2,63),r,s;return Q.forEach(function(o,i){s=v.dist(e,o),s<n&&(n=s,r=i)}),{mdist:n,mpos:r}},abcratio:function(Q,e){if(e!==2&&e!==3)return!1;if(typeof Q>"u")Q=.5;else if(Q===0||Q===1)return Q;const n=G(Q,e)+G(1-Q,e),r=n-1;return o1(r/n)},projectionratio:function(Q,e){if(e!==2&&e!==3)return!1;if(typeof Q>"u")Q=.5;else if(Q===0||Q===1)return Q;const n=G(1-Q,e),r=G(Q,e)+n;return n/r},lli8:function(Q,e,n,r,s,o,i,a){const c=(Q*r-e*n)*(s-i)-(Q-n)*(s*a-o*i),h=(Q*r-e*n)*(o-a)-(e-r)*(s*a-o*i),l=(Q-n)*(o-a)-(e-r)*(s-i);return l==0?!1:{x:c/l,y:h/l}},lli4:function(Q,e,n,r){const s=Q.x,o=Q.y,i=e.x,a=e.y,c=n.x,h=n.y,l=r.x,u=r.y;return v.lli8(s,o,i,a,c,h,l,u)},lli:function(Q,e){return v.lli4(Q,Q.c,e,e.c)},makeline:function(Q,e){return new R(Q.x,Q.y,(Q.x+e.x)/2,(Q.y+e.y)/2,e.x,e.y)},findbbox:function(Q){let e=C1,n=C1,r=z1,s=z1;return Q.forEach(function(o){const i=o.bbox();e>i.x.min&&(e=i.x.min),n>i.y.min&&(n=i.y.min),r<i.x.max&&(r=i.x.max),s<i.y.max&&(s=i.y.max)}),{x:{min:e,mid:(e+r)/2,max:r,size:r-e},y:{min:n,mid:(n+s)/2,max:s,size:s-n}}},shapeintersections:function(Q,e,n,r,s){if(!v.bboxoverlap(e,r))return[];const o=[],i=[Q.startcap,Q.forward,Q.back,Q.endcap],a=[n.startcap,n.forward,n.back,n.endcap];return i.forEach(function(c){c.virtual||a.forEach(function(h){if(h.virtual)return;const l=c.intersects(h,s);l.length>0&&(l.c1=c,l.c2=h,l.s1=Q,l.s2=n,o.push(l))})}),o},makeshape:function(Q,e,n){const r=e.points.length,s=Q.points.length,o=v.makeline(e.points[r-1],Q.points[0]),i=v.makeline(Q.points[s-1],e.points[0]),a={startcap:o,forward:Q,back:e,endcap:i,bbox:v.findbbox([o,Q,e,i])};return a.intersections=function(c){return v.shapeintersections(a,a.bbox,c,c.bbox,n)},a},getminmax:function(Q,e,n){if(!n)return{min:0,max:0};let r=C1,s=z1,o,i;n.indexOf(0)===-1&&(n=[0].concat(n)),n.indexOf(1)===-1&&n.push(1);for(let a=0,c=n.length;a<c;a++)o=n[a],i=Q.get(o),i[e]<r&&(r=i[e]),i[e]>s&&(s=i[e]);return{min:r,mid:(r+s)/2,max:s,size:s-r}},align:function(Q,e){const n=e.p1.x,r=e.p1.y,s=-Q1(e.p2.y-r,e.p2.x-n),o=function(i){return{x:(i.x-n)*t1(s)-(i.y-r)*s1(s),y:(i.x-n)*s1(s)+(i.y-r)*t1(s)}};return Q.map(o)},roots:function(Q,e){e=e||{p1:{x:0,y:0},p2:{x:1,y:0}};const n=Q.length-1,r=v.align(Q,e),s=function(A){return 0<=A&&A<=1};if(n===2){const A=r[0].y,z=r[1].y,O=r[2].y,_=A-2*z+O;if(_!==0){const q=-e1(z*z-A*O),U=-A+z,Z=-(q+U)/_,J=-(-q+U)/_;return[Z,J].filter(s)}else if(z!==O&&_===0)return[(2*z-O)/(2*z-2*O)].filter(s);return[]}const o=r[0].y,i=r[1].y,a=r[2].y,c=r[3].y;let h=-o+3*i-3*a+c,l=3*o-6*i+3*a,u=-3*o+3*i,d=o;if(v.approximately(h,0)){if(v.approximately(l,0))return v.approximately(u,0)?[]:[-d/u].filter(s);const A=e1(u*u-4*l*d),z=2*l;return[(A-u)/z,(-u-A)/z].filter(s)}l/=h,u/=h,d/=h;const f=(3*u-l*l)/3,y=f/3,p=(2*l*l*l-9*l*u+27*d)/27,g=p/2,M=g*g+y*y*y;let k,E,T,$,S;if(M<0){const A=-f/3,z=A*A*A,O=e1(z),_=-p/(2*O),q=_<-1?-1:_>1?1:_,U=v0(q),Z=a1(O),J=2*Z;return T=J*t1(U/3)-l/3,$=J*t1((U+p1)/3)-l/3,S=J*t1((U+2*p1)/3)-l/3,[T,$,S].filter(s)}else{if(M===0)return k=g<0?a1(-g):-a1(g),T=2*k-l/3,$=-k-l/3,[T,$].filter(s);{const A=e1(M);return k=a1(-g+A),E=a1(g+A),[k-E-l/3].filter(s)}}},droots:function(Q){if(Q.length===3){const e=Q[0],n=Q[1],r=Q[2],s=e-2*n+r;if(s!==0){const o=-e1(n*n-e*r),i=-e+n,a=-(o+i)/s,c=-(-o+i)/s;return[a,c]}else if(n!==r&&s===0)return[(2*n-r)/(2*(n-r))];return[]}if(Q.length===2){const e=Q[0],n=Q[1];return e!==n?[e/(e-n)]:[]}return[]},curvature:function(Q,e,n,r,s){let o,i,a,c,h=0,l=0;const u=v.compute(Q,e),d=v.compute(Q,n),f=u.x*u.x+u.y*u.y;if(r?(o=e1(G(u.y*d.z-d.y*u.z,2)+G(u.z*d.x-d.z*u.x,2)+G(u.x*d.y-d.x*u.y,2)),i=G(f+u.z*u.z,3/2)):(o=u.x*d.y-u.y*d.x,i=G(f,3/2)),o===0||i===0)return{k:0,r:0};if(h=o/i,l=i/o,!s){const y=v.curvature(Q-.001,e,n,r,!0).k,p=v.curvature(Q+.001,e,n,r,!0).k;c=(p-h+(h-y))/2,a=(o1(p-h)+o1(h-y))/2}return{k:h,r:l,dk:c,adk:a}},inflections:function(Q){if(Q.length<4)return[];const e=v.align(Q,{p1:Q[0],p2:Q.slice(-1)[0]}),n=e[2].x*e[1].y,r=e[3].x*e[1].y,s=e[1].x*e[2].y,o=e[3].x*e[2].y,i=18*(-3*n+2*r+3*s-o),a=18*(3*n-r-3*s),c=18*(s-n);if(v.approximately(i,0)){if(!v.approximately(a,0)){let d=-c/a;if(0<=d&&d<=1)return[d]}return[]}const h=2*i;if(v.approximately(h,0))return[];const l=a*a-4*i*c;if(l<0)return[];const u=Math.sqrt(l);return[(u-a)/h,-(a+u)/h].filter(function(d){return 0<=d&&d<=1})},bboxoverlap:function(Q,e){const n=["x","y"],r=n.length;for(let s=0,o,i,a,c;s<r;s++)if(o=n[s],i=Q[o].mid,a=e[o].mid,c=(Q[o].size+e[o].size)/2,o1(i-a)>=c)return!1;return!0},expandbox:function(Q,e){e.x.min<Q.x.min&&(Q.x.min=e.x.min),e.y.min<Q.y.min&&(Q.y.min=e.y.min),e.z&&e.z.min<Q.z.min&&(Q.z.min=e.z.min),e.x.max>Q.x.max&&(Q.x.max=e.x.max),e.y.max>Q.y.max&&(Q.y.max=e.y.max),e.z&&e.z.max>Q.z.max&&(Q.z.max=e.z.max),Q.x.mid=(Q.x.min+Q.x.max)/2,Q.y.mid=(Q.y.min+Q.y.max)/2,Q.z&&(Q.z.mid=(Q.z.min+Q.z.max)/2),Q.x.size=Q.x.max-Q.x.min,Q.y.size=Q.y.max-Q.y.min,Q.z&&(Q.z.size=Q.z.max-Q.z.min)},pairiteration:function(Q,e,n){const r=Q.bbox(),s=e.bbox(),o=1e5,i=n||.5;if(r.x.size+r.y.size<i&&s.x.size+s.y.size<i)return[(o*(Q._t1+Q._t2)/2|0)/o+"/"+(o*(e._t1+e._t2)/2|0)/o];let a=Q.split(.5),c=e.split(.5),h=[{left:a.left,right:c.left},{left:a.left,right:c.right},{left:a.right,right:c.right},{left:a.right,right:c.left}];h=h.filter(function(u){return v.bboxoverlap(u.left.bbox(),u.right.bbox())});let l=[];return h.length===0||(h.forEach(function(u){l=l.concat(v.pairiteration(u.left,u.right,i))}),l=l.filter(function(u,d){return l.indexOf(u)===d})),l},getccenter:function(Q,e,n){const r=e.x-Q.x,s=e.y-Q.y,o=n.x-e.x,i=n.y-e.y,a=r*t1(n1)-s*s1(n1),c=r*s1(n1)+s*t1(n1),h=o*t1(n1)-i*s1(n1),l=o*s1(n1)+i*t1(n1),u=(Q.x+e.x)/2,d=(Q.y+e.y)/2,f=(e.x+n.x)/2,y=(e.y+n.y)/2,p=u+a,g=d+c,M=f+h,k=y+l,E=v.lli8(u,d,p,g,f,y,M,k),T=v.dist(E,Q);let $=Q1(Q.y-E.y,Q.x-E.x),S=Q1(e.y-E.y,e.x-E.x),A=Q1(n.y-E.y,n.x-E.x),z;return $<A?(($>S||S>A)&&($+=p1),$>A&&(z=A,A=$,$=z)):A<S&&S<$?(z=A,A=$,$=z):A+=p1,E.s=$,E.e=A,E.r=T,E},numberSort:function(Q,e){return Q-e}};class u1{constructor(e){this.curves=[],this._3d=!1,e&&(this.curves=e,this._3d=this.curves[0]._3d)}valueOf(){return this.toString()}toString(){return"["+this.curves.map(function(e){return v.pointsToString(e.points)}).join(", ")+"]"}addCurve(e){this.curves.push(e),this._3d=this._3d||e._3d}length(){return this.curves.map(function(e){return e.length()}).reduce(function(e,n){return e+n})}curve(e){return this.curves[e]}bbox(){const e=this.curves;for(var n=e[0].bbox(),r=1;r<e.length;r++)v.expandbox(n,e[r].bbox());return n}offset(e){const n=[];return this.curves.forEach(function(r){n.push(...r.offset(e))}),new u1(n)}}const{abs:c1,min:Z1,max:H1,cos:k0,sin:E0,acos:$0,sqrt:h1}=Math,A0=Math.PI;class R{constructor(e){let n=e&&e.forEach?e:Array.from(arguments).slice(),r=!1;if(typeof n[0]=="object"){r=n.length;const f=[];n.forEach(function(y){["x","y","z"].forEach(function(p){typeof y[p]<"u"&&f.push(y[p])})}),n=f}let s=!1;const o=n.length;if(r){if(r>4){if(arguments.length!==1)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");s=!0}}else if(o!==6&&o!==8&&o!==9&&o!==12&&arguments.length!==1)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");const i=this._3d=!s&&(o===9||o===12)||e&&e[0]&&typeof e[0].z<"u",a=this.points=[];for(let f=0,y=i?3:2;f<o;f+=y){var c={x:n[f],y:n[f+1]};i&&(c.z=n[f+2]),a.push(c)}const h=this.order=a.length-1,l=this.dims=["x","y"];i&&l.push("z"),this.dimlen=l.length;const u=v.align(a,{p1:a[0],p2:a[h]}),d=v.dist(a[0],a[h]);this._linear=u.reduce((f,y)=>f+c1(y.y),0)<d/50,this._lut=[],this._t1=0,this._t2=1,this.update()}static quadraticFromPoints(e,n,r,s){if(typeof s>"u"&&(s=.5),s===0)return new R(n,n,r);if(s===1)return new R(e,n,n);const o=R.getABC(2,e,n,r,s);return new R(e,o.A,r)}static cubicFromPoints(e,n,r,s,o){typeof s>"u"&&(s=.5);const i=R.getABC(3,e,n,r,s);typeof o>"u"&&(o=v.dist(n,i.C));const a=o*(1-s)/s,c=v.dist(e,r),h=(r.x-e.x)/c,l=(r.y-e.y)/c,u=o*h,d=o*l,f=a*h,y=a*l,p={x:n.x-u,y:n.y-d},g={x:n.x+f,y:n.y+y},M=i.A,k={x:M.x+(p.x-M.x)/(1-s),y:M.y+(p.y-M.y)/(1-s)},E={x:M.x+(g.x-M.x)/s,y:M.y+(g.y-M.y)/s},T={x:e.x+(k.x-e.x)/s,y:e.y+(k.y-e.y)/s},$={x:r.x+(E.x-r.x)/(1-s),y:r.y+(E.y-r.y)/(1-s)};return new R(e,T,$,r)}static getUtils(){return v}getUtils(){return R.getUtils()}static get PolyBezier(){return u1}valueOf(){return this.toString()}toString(){return v.pointsToString(this.points)}toSVG(){if(this._3d)return!1;const e=this.points,n=e[0].x,r=e[0].y,s=["M",n,r,this.order===2?"Q":"C"];for(let o=1,i=e.length;o<i;o++)s.push(e[o].x),s.push(e[o].y);return s.join(" ")}setRatios(e){if(e.length!==this.points.length)throw new Error("incorrect number of ratio values");this.ratios=e,this._lut=[]}verify(){const e=this.coordDigest();e!==this._print&&(this._print=e,this.update())}coordDigest(){return this.points.map(function(e,n){return""+n+e.x+e.y+(e.z?e.z:0)}).join("")}update(){this._lut=[],this.dpoints=v.derive(this.points,this._3d),this.computedirection()}computedirection(){const e=this.points,n=v.angle(e[0],e[this.order],e[1]);this.clockwise=n>0}length(){return v.length(this.derivative.bind(this))}static getABC(e=2,n,r,s,o=.5){const i=v.projectionratio(o,e),a=1-i,c={x:i*n.x+a*s.x,y:i*n.y+a*s.y},h=v.abcratio(o,e);return{A:{x:r.x+(r.x-c.x)/h,y:r.y+(r.y-c.y)/h},B:r,C:c,S:n,E:s}}getABC(e,n){n=n||this.get(e);let r=this.points[0],s=this.points[this.order];return R.getABC(this.order,r,n,s,e)}getLUT(e){if(this.verify(),e=e||100,this._lut.length===e+1)return this._lut;this._lut=[],e++,this._lut=[];for(let n=0,r,s;n<e;n++)s=n/(e-1),r=this.compute(s),r.t=s,this._lut.push(r);return this._lut}on(e,n){n=n||5;const r=this.getLUT(),s=[];for(let o=0,i,a=0;o<r.length;o++)i=r[o],v.dist(i,e)<n&&(s.push(i),a+=o/r.length);return s.length?t/=s.length:!1}project(e){const n=this.getLUT(),r=n.length-1,s=v.closest(n,e),o=s.mpos,i=(o-1)/r,a=(o+1)/r,c=.1/r;let h=s.mdist,l=i,u=l,d;h+=1;for(let f;l<a+c;l+=c)d=this.compute(l),f=v.dist(e,d),f<h&&(h=f,u=l);return u=u<0?0:u>1?1:u,d=this.compute(u),d.t=u,d.d=h,d}get(e){return this.compute(e)}point(e){return this.points[e]}compute(e){return this.ratios?v.computeWithRatios(e,this.points,this.ratios,this._3d):v.compute(e,this.points,this._3d,this.ratios)}raise(){const e=this.points,n=[e[0]],r=e.length;for(let s=1,o,i;s<r;s++)o=e[s],i=e[s-1],n[s]={x:(r-s)/r*o.x+s/r*i.x,y:(r-s)/r*o.y+s/r*i.y};return n[r]=e[r-1],new R(n)}derivative(e){return v.compute(e,this.dpoints[0],this._3d)}dderivative(e){return v.compute(e,this.dpoints[1],this._3d)}align(){let e=this.points;return new R(v.align(e,{p1:e[0],p2:e[e.length-1]}))}curvature(e){return v.curvature(e,this.dpoints[0],this.dpoints[1],this._3d)}inflections(){return v.inflections(this.points)}normal(e){return this._3d?this.__normal3(e):this.__normal2(e)}__normal2(e){const n=this.derivative(e),r=h1(n.x*n.x+n.y*n.y);return{t:e,x:-n.y/r,y:n.x/r}}__normal3(e){const n=this.derivative(e),r=this.derivative(e+.01),s=h1(n.x*n.x+n.y*n.y+n.z*n.z),o=h1(r.x*r.x+r.y*r.y+r.z*r.z);n.x/=s,n.y/=s,n.z/=s,r.x/=o,r.y/=o,r.z/=o;const i={x:r.y*n.z-r.z*n.y,y:r.z*n.x-r.x*n.z,z:r.x*n.y-r.y*n.x},a=h1(i.x*i.x+i.y*i.y+i.z*i.z);i.x/=a,i.y/=a,i.z/=a;const c=[i.x*i.x,i.x*i.y-i.z,i.x*i.z+i.y,i.x*i.y+i.z,i.y*i.y,i.y*i.z-i.x,i.x*i.z-i.y,i.y*i.z+i.x,i.z*i.z];return{t:e,x:c[0]*n.x+c[1]*n.y+c[2]*n.z,y:c[3]*n.x+c[4]*n.y+c[5]*n.z,z:c[6]*n.x+c[7]*n.y+c[8]*n.z}}hull(e){let n=this.points,r=[],s=[],o=0;for(s[o++]=n[0],s[o++]=n[1],s[o++]=n[2],this.order===3&&(s[o++]=n[3]);n.length>1;){r=[];for(let i=0,a,c=n.length-1;i<c;i++)a=v.lerp(e,n[i],n[i+1]),s[o++]=a,r.push(a);n=r}return s}split(e,n){if(e===0&&n)return this.split(n).left;if(n===1)return this.split(e).right;const r=this.hull(e),s={left:this.order===2?new R([r[0],r[3],r[5]]):new R([r[0],r[4],r[7],r[9]]),right:this.order===2?new R([r[5],r[4],r[2]]):new R([r[9],r[8],r[6],r[3]]),span:r};return s.left._t1=v.map(0,0,1,this._t1,this._t2),s.left._t2=v.map(e,0,1,this._t1,this._t2),s.right._t1=v.map(e,0,1,this._t1,this._t2),s.right._t2=v.map(1,0,1,this._t1,this._t2),n?(n=v.map(n,e,1,0,1),s.right.split(n).left):s}extrema(){const e={};let n=[];return this.dims.forEach(function(r){let s=function(i){return i[r]},o=this.dpoints[0].map(s);e[r]=v.droots(o),this.order===3&&(o=this.dpoints[1].map(s),e[r]=e[r].concat(v.droots(o))),e[r]=e[r].filter(function(i){return i>=0&&i<=1}),n=n.concat(e[r].sort(v.numberSort))}.bind(this)),e.values=n.sort(v.numberSort).filter(function(r,s){return n.indexOf(r)===s}),e}bbox(){const e=this.extrema(),n={};return this.dims.forEach(function(r){n[r]=v.getminmax(this,r,e[r])}.bind(this)),n}overlaps(e){const n=this.bbox(),r=e.bbox();return v.bboxoverlap(n,r)}offset(e,n){if(typeof n<"u"){const r=this.get(e),s=this.normal(e),o={c:r,n:s,x:r.x+s.x*n,y:r.y+s.y*n};return this._3d&&(o.z=r.z+s.z*n),o}if(this._linear){const r=this.normal(0),s=this.points.map(function(o){const i={x:o.x+e*r.x,y:o.y+e*r.y};return o.z&&r.z&&(i.z=o.z+e*r.z),i});return[new R(s)]}return this.reduce().map(function(r){return r._linear?r.offset(e)[0]:r.scale(e)})}simple(){if(this.order===3){const s=v.angle(this.points[0],this.points[3],this.points[1]),o=v.angle(this.points[0],this.points[3],this.points[2]);if(s>0&&o<0||s<0&&o>0)return!1}const e=this.normal(0),n=this.normal(1);let r=e.x*n.x+e.y*n.y;return this._3d&&(r+=e.z*n.z),c1($0(r))<A0/3}reduce(){let e,n=0,r=0,s=.01,o,i=[],a=[],c=this.extrema().values;for(c.indexOf(0)===-1&&(c=[0].concat(c)),c.indexOf(1)===-1&&c.push(1),n=c[0],e=1;e<c.length;e++)r=c[e],o=this.split(n,r),o._t1=n,o._t2=r,i.push(o),n=r;return i.forEach(function(h){for(n=0,r=0;r<=1;)for(r=n+s;r<=1+s;r+=s)if(o=h.split(n,r),!o.simple()){if(r-=s,c1(n-r)<s)return[];o=h.split(n,r),o._t1=v.map(n,0,1,h._t1,h._t2),o._t2=v.map(r,0,1,h._t1,h._t2),a.push(o),n=r;break}n<1&&(o=h.split(n,1),o._t1=v.map(n,0,1,h._t1,h._t2),o._t2=h._t2,a.push(o))}),a}translate(e,n,r){r=typeof r=="number"?r:n;const s=this.order;let o=this.points.map((i,a)=>(1-a/s)*n+a/s*r);return new R(this.points.map((i,a)=>({x:i.x+e.x*o[a],y:i.y+e.y*o[a]})))}scale(e){const n=this.order;let r=!1;if(typeof e=="function"&&(r=e),r&&n===2)return this.raise().scale(r);const s=this.clockwise,o=this.points;if(this._linear)return this.translate(this.normal(0),r?r(0):e,r?r(1):e);const i=r?r(0):e,a=r?r(1):e,c=[this.offset(0,10),this.offset(1,10)],h=[],l=v.lli4(c[0],c[0].c,c[1],c[1].c);if(!l)throw new Error("cannot scale this curve. Try reducing it first.");return[0,1].forEach(function(u){const d=h[u*n]=v.copy(o[u*n]);d.x+=(u?a:i)*c[u].n.x,d.y+=(u?a:i)*c[u].n.y}),r?([0,1].forEach(function(u){if(!(n===2&&u)){var d=o[u+1],f={x:d.x-l.x,y:d.y-l.y},y=r?r((u+1)/n):e;r&&!s&&(y=-y);var p=h1(f.x*f.x+f.y*f.y);f.x/=p,f.y/=p,h[u+1]={x:d.x+y*f.x,y:d.y+y*f.y}}}),new R(h)):([0,1].forEach(u=>{if(n===2&&u)return;const d=h[u*n],f=this.derivative(u),y={x:d.x+f.x,y:d.y+f.y};h[u+1]=v.lli4(d,y,l,o[u+1])}),new R(h))}outline(e,n,r,s){if(n=n===void 0?e:n,this._linear){const $=this.normal(0),S=this.points[0],A=this.points[this.points.length-1];let z,O,_;r===void 0&&(r=e,s=n),z={x:S.x+$.x*e,y:S.y+$.y*e},_={x:A.x+$.x*r,y:A.y+$.y*r},O={x:(z.x+_.x)/2,y:(z.y+_.y)/2};const q=[z,O,_];z={x:S.x-$.x*n,y:S.y-$.y*n},_={x:A.x-$.x*s,y:A.y-$.y*s},O={x:(z.x+_.x)/2,y:(z.y+_.y)/2};const U=[_,O,z],Z=v.makeline(U[2],q[0]),J=v.makeline(q[2],U[0]),i1=[Z,new R(q),J,new R(U)];return new u1(i1)}const o=this.reduce(),i=o.length,a=[];let c=[],h,l=0,u=this.length();const d=typeof r<"u"&&typeof s<"u";function f($,S,A,z,O){return function(_){const q=z/A,U=(z+O)/A,Z=S-$;return v.map(_,0,1,$+q*Z,$+U*Z)}}o.forEach(function($){const S=$.length();d?(a.push($.scale(f(e,r,u,l,S))),c.push($.scale(f(-n,-s,u,l,S)))):(a.push($.scale(e)),c.push($.scale(-n))),l+=S}),c=c.map(function($){return h=$.points,h[3]?$.points=[h[3],h[2],h[1],h[0]]:$.points=[h[2],h[1],h[0]],$}).reverse();const y=a[0].points[0],p=a[i-1].points[a[i-1].points.length-1],g=c[i-1].points[c[i-1].points.length-1],M=c[0].points[0],k=v.makeline(g,y),E=v.makeline(p,M),T=[k].concat(a).concat([E]).concat(c);return new u1(T)}outlineshapes(e,n,r){n=n||e;const s=this.outline(e,n).curves,o=[];for(let i=1,a=s.length;i<a/2;i++){const c=v.makeshape(s[i],s[a-i],r);c.startcap.virtual=i>1,c.endcap.virtual=i<a/2-1,o.push(c)}return o}intersects(e,n){return e?e.p1&&e.p2?this.lineIntersects(e):(e instanceof R&&(e=e.reduce()),this.curveintersects(this.reduce(),e,n)):this.selfintersects(n)}lineIntersects(e){const n=Z1(e.p1.x,e.p2.x),r=Z1(e.p1.y,e.p2.y),s=H1(e.p1.x,e.p2.x),o=H1(e.p1.y,e.p2.y);return v.roots(this.points,e).filter(i=>{var a=this.get(i);return v.between(a.x,n,s)&&v.between(a.y,r,o)})}selfintersects(e){const n=this.reduce(),r=n.length-2,s=[];for(let o=0,i,a,c;o<r;o++)a=n.slice(o,o+1),c=n.slice(o+2),i=this.curveintersects(a,c,e),s.push(...i);return s}curveintersects(e,n,r){const s=[];e.forEach(function(i){n.forEach(function(a){i.overlaps(a)&&s.push({left:i,right:a})})});let o=[];return s.forEach(function(i){const a=v.pairiteration(i.left,i.right,r);a.length>0&&(o=o.concat(a))}),o}arcs(e){return e=e||.5,this._iterate(e,[])}_error(e,n,r,s){const o=(s-r)/4,i=this.get(r+o),a=this.get(s-o),c=v.dist(e,n),h=v.dist(e,i),l=v.dist(e,a);return c1(h-c)+c1(l-c)}_iterate(e,n){let r=0,s=1,o;do{o=0,s=1;let i=this.get(r),a,c,h,l,u=!1,d=!1,f,y=s,p=1;do if(d=u,l=h,y=(r+s)/2,a=this.get(y),c=this.get(s),h=v.getccenter(i,a,c),h.interval={start:r,end:s},u=this._error(h,i,r,s)<=e,f=d&&!u,f||(p=s),u){if(s>=1){if(h.interval.end=p=1,l=h,s>1){let M={x:h.x+h.r*k0(h.e),y:h.y+h.r*E0(h.e)};h.e+=v.angle({x:h.x,y:h.y},M,this.get(1))}break}s=s+(s-r)/2}else s=y;while(!f&&o++<100);if(o>=100)break;l=l||h,n.push(l),r=p}while(s<1);return n}}class t0{#t=document.createElementNS("http://www.w3.org/2000/svg","svg");#e=document.createElementNS("http://www.w3.org/2000/svg","path");constructor(){this.#t.style.width="0",this.#t.style.height="0",this.#t.style.position="absolute",this.#t.appendChild(this.#e),document.body.appendChild(this.#t)}getBBox(){return this.#e.getBBox()}get d(){return this.#e.getAttribute("d")??""}set d(e){this.#e.style.d="",this.#e.style.d=N.cssifyPath(e);const n=this.#e.style.d!="";if(this.#e.style.d="",n)this.#e.setAttribute("d",e);else throw new Error("Invalid path")}get empty(){return this.d==""}clear(){this.d=""}get length(){return this.#e.getTotalLength()}getPoint(e){return this.#e.getPointAtLength(e)}load(e){typeof e!="string"&&(e instanceof N||(e=new N([e])),e=e.rawPath),this.d=e}measure(e){return this.load(e),this.length}}const j=new Intl.NumberFormat("en-US",{maximumSignificantDigits:8,useGrouping:!1}).format;class D{constructor(e,n,r,s){this.x0=e,this.y0=n,this.x=r,this.y=s,b.assertFinite(e,n,r,s),this.asString=`L ${j(r)},${j(s)}`,this.outgoingAngle=this.incomingAngle=Math.atan2(s-n,r-e)}reverse(){return new D(this.x,this.y,this.x0,this.y0)}toJSON(){return{command:"L",x0:this.x0,y0:this.y0,x:this.x,y:this.y}}static relative(e,n,r,s){return new this(e,n,r+e,s+n)}incomingAngle;outgoingAngle;command="L";asString;get length(){return Math.hypot(this.x0-this.x,this.y0-this.y)}translate(e,n){return new D(this.x0+e,this.y0+n,this.x+e,this.y+n)}toCubic(){return new K(this.x0,this.y0,b.lerp(this.x0,this.x,1/3),b.lerp(this.y0,this.y,1/3),b.lerp(this.x0,this.x,2/3),b.lerp(this.y0,this.y,2/3),this.x,this.y)}transform(e){const n=B(this.x,this.y,e),r=B(this.x0,this.y0,e);return new D(r.x,r.y,n.x,n.y)}}class X{constructor(e,n,r,s,o,i,a){this.x0=e,this.y0=n,this.x1=r,this.y1=s,this.x=o,this.y=i,this.creationInfo=a,b.assertFinite(e,n,r,s,o,i),this.asString=`Q ${j(r)},${j(s)} ${j(o)},${j(i)}`}reverse(){return X.controlPoints(this.x,this.y,this.x1,this.y1,this.x0,this.y0)}static line(e,n,r,s,o){return new this(e,n,(e+r)/2,(n+s)/2,r,s,o)}static line4(e,n,r,s){return this.line(e,n,r,s,{source:"line"})}static line2(e,n){return this.line4(e.x,e.y,n.x,n.y)}static angles(e,n,r,s,o,i){b.assertFinite(e,n,r,s,o,i);const a=q0({x0:e,y0:n,angle:r},{x0:s,y0:o,angle:i+Math.PI});return a?new this(e,n,a.x,a.y,s,o,{source:"angles",success:!0,angle:i,angle0:r}):this.line(e,n,s,o,{source:"angles",success:!1,angle:i,angle0:r})}newAngles(e,n){return e??=this.requestedIncomingAngle,n??=this.requestedOutgoingAngle,X.angles(this.x0,this.y0,e,this.x,this.y,n)}toJSON(){return{command:"Q",x0:this.x0,y0:this.y0,x1:this.x1,y1:this.y1,x:this.x,y:this.y,creationInfo:this.creationInfo}}static controlPoints(e,n,r,s,o,i){return new this(e,n,r,s,o,i,{source:"controlPoints"})}static relative(e,n,r,s,o,i){return this.controlPoints(e,n,r+e,s+n,o+e,i+n)}get incomingAngle(){return Math.atan2(this.y1-this.y0,this.x1-this.x0)}get outgoingAngle(){return Math.atan2(this.y-this.y1,this.x-this.x1)}get requestedIncomingAngle(){return this.creationInfo.source=="angles"?this.creationInfo.angle0:this.incomingAngle}get requestedOutgoingAngle(){return this.creationInfo.source=="angles"?this.creationInfo.angle:this.outgoingAngle}command="Q";asString;translate(e,n){return X.controlPoints(this.x0+e,this.y0+n,this.x1+e,this.y1+n,this.x+e,this.y+n)}transform(e){const n=B(this.x0,this.y0,e),r=B(this.x1,this.y1,e),s=B(this.x,this.y,e);return X.controlPoints(n.x,n.y,r.x,r.y,s.x,s.y)}toCubic(){return new K(this.x0,this.y0,b.lerp(this.x0,this.x1,2/3),b.lerp(this.y0,this.y1,2/3),b.lerp(this.x,this.x1,2/3),b.lerp(this.y,this.y1,2/3),this.x,this.y)}split(e){const{x:n,x0:r,x1:s,y:o,y0:i,y1:a}=this,c=r,h=i,l=(1-e)*r+e*s,u=(1-e)*i+e*a,d=(1-e)**2*r+2*(1-e)*e*s+e**2*n,f=(1-e)**2*i+2*(1-e)*e*a+e**2*o,y=X.controlPoints(c,h,l,u,d,f),p=d,g=f,M=(1-e)*s+e*n,k=(1-e)*a+e*o,E=n,T=o,$=X.controlPoints(p,g,M,k,E,T);return[y,$]}multiSplit(e){if(b.assertFinite(e),e<1||(e|0)!=e)throw new Error("wtf");const n=[];let r=this;for(;e>1;){const s=1/e;let o;[o,r]=r.split(s),n.push(o),e--}return n.push(r),n}}class K{constructor(e,n,r,s,o,i,a,c){this.x0=e,this.y0=n,this.x1=r,this.y1=s,this.x2=o,this.y2=i,this.x=a,this.y=c,b.assertFinite(e,n,r,s,o,i,a,c),this.asString=`C ${j(r)},${j(s)} ${j(o)},${j(i)} ${j(a)},${j(c)}`}reverse(){return new K(this.x,this.y,this.x2,this.y2,this.x1,this.y1,this.x0,this.y0)}static relative(e,n,r,s,o,i,a,c){return new this(e,n,r+e,s+n,o+e,i+n,a+e,c+n)}get incomingAngle(){return Math.atan2(this.y1-this.y0,this.x1-this.x0)}get outgoingAngle(){return Math.atan2(this.y-this.y2,this.x-this.x2)}command="C";asString;translate(e,n){return new K(this.x0+e,this.y0+n,this.x1+e,this.y1+n,this.x2+e,this.y2+n,this.x+e,this.y+n)}transform(e){const n=B(this.x0,this.y0,e),r=B(this.x1,this.y1,e),s=B(this.x2,this.y2,e),o=B(this.x,this.y,e);return new K(n.x,n.y,r.x,r.y,s.x,s.y,o.x,o.y)}toCubic(){return this}}class P1{get commands(){return this.#t}addCommand(e){this.#t.push(e),this.#e=void 0}addCommands(e){return e.forEach(n=>this.addCommand(n)),this}static fromStrings(e){let n=e.join(" ");const r=[];let s;for(;n=n.replace(/^ */,""),n!="";){let o=n0.exec(n);if(o){const i=b.parseFloatX(o[1]),a=b.parseFloatX(o[2]);if(i===void 0||a===void 0)throw console.error(o,i,a,this),new Error("wtf");s&&r.push(s),s=this.M(i,a),n=o[3];continue}if(s){if(o=r0.exec(n),o){const i=b.parseFloatX(o[1]),a=b.parseFloatX(o[2]);if(i===void 0||a===void 0)throw console.error(o,i,a,this),new Error("wtf");s=s.L(i,a),n=o[3];continue}if(o=i0.exec(n),o){const i=b.parseFloatX(o[1]),a=b.parseFloatX(o[2]),c=b.parseFloatX(o[3]),h=b.parseFloatX(o[4]);if(i===void 0||a===void 0||c===void 0||h===void 0)throw console.error(o,i,a,c,h,this),new Error("wtf");s=s.Q(i,a,c,h),n=o[5];continue}if(o=o0.exec(n),o){const i=b.parseFloatX(o[1]),a=b.parseFloatX(o[2]),c=b.parseFloatX(o[3]),h=b.parseFloatX(o[4]),l=b.parseFloatX(o[5]),u=b.parseFloatX(o[6]);if(i===void 0||a===void 0||c===void 0||h===void 0||l===void 0||u===void 0)throw console.error(o,i,a,c,h,l,u,this),new Error("wtf");s=s.C(i,a,c,h,l,u),n=o[7];continue}}throw console.error(n),new Error("wtf")}return s&&r.push(s),r}static M(e,n){const r=new P1;return r.M(e,n),r}#t=[];get pathShape(){return new N(this.#t)}#e;M(e,n,r=NaN){return b.assertFinite(e,n),this.#e={x:e,y:n,outgoingAngle:r},this}previous(){return this.#e??this.#t.at(-1)}H(e){const n=this.previous();return this.addCommand(new D(n.x,n.y,e,n.y)),this}V(e){const n=this.previous();return this.addCommand(new D(n.x,n.y,n.x,e)),this}L(e,n){const r=this.previous();return this.addCommand(new D(r.x,r.y,e,n)),this}Q(e,n,r,s){const o=this.previous();return this.addCommand(X.controlPoints(o.x,o.y,e,n,r,s)),this}Q_HV(e,n){const r=this.previous();return this.Q(e,r.y,e,n)}Q_VH(e,n){const r=this.previous();return this.Q(r.x,n,e,n)}Q_angles(e,n,r,s){const o=this.previous();if(s??=o.outgoingAngle,s===void 0)throw new Error("wtf");return this.addCommand(X.angles(o.x,o.y,s,e,n,r)),this}C(e,n,r,s,o,i){const a=this.previous();return this.addCommand(new K(a.x,a.y,e,n,r,s,o,i)),this}circle(e,n,r="cw"){const s=this.previous(),o=s.x,i=s.y,a=Math.atan2(i-n,o-e),c=Math.hypot(i-n,o-e),h=r=="cw"?1:-1,l=a+Math.PI*2*h,u=b.makeLinear(0,a,1,l);function d(p){switch(p){case 0:case 1:return s;default:{const g=u(p),M=b.polarToRectangular(c,g);return{x:e+M.x,y:n+M.y}}}}function f(p){return d(p)}return this.addParametricPath(f,8),this}arc(e,n,r,s,o){const i=this.previous(),a=i.x,c=i.y;let h=b.positiveModulo(Math.atan2(c-n,a-e),Math.PI*2);const l=Math.hypot(c-n,a-e);let u=b.positiveModulo(Math.atan2(s-n,r-e),Math.PI*2);const d=Math.hypot(s-n,r-e);o=="cw"?h>u&&(u+=Math.PI*2):h<u&&(h+=Math.PI*2);const f=Math.abs(h-u),y=Math.ceil(f*1.17+1e-4),p=b.makeLinear(0,l,1,d),g=b.makeLinear(0,h,1,u);function M(k){switch(k){case 0:return i;case 1:return{x:r,y:s};default:{const E=b.polarToRectangular(p(k),g(k));return{x:e+E.x,y:n+E.y}}}}return this.addParametricPath(M,y)}addParametricPath(e,n){if(n<=0)throw new Error("wtf");const r=1e-4/n,s=b.initializedArray(n+1,o=>{const i=o/n,a=e(i),c=e0(e,i,r);return{t:i,point:a,direction:c}});if(s.some(o=>!isFinite(o.direction))){const{x:o,y:i}=s[0].point;if(b.assertFinite(o,i),s.some(a=>a.point.x!=o||a.point.y!=i))throw new Error("Unable to create a path from this function.  Unable to compute the derivative.");for(let a=0;a<n;a++)this.Q(o,i,o,i)}else b.initializedArray(n,i=>({from:s[i],to:s[i+1]})).forEach(i=>{this.Q_angles(i.to.point.x,i.to.point.y,i.to.direction,i.from.direction)});return this}}function j1(Q,e,n){if(!(e>=0&&e<=1))throw new Error("Expected 0 ≤ t ≤ 1");const r=Math.max(0,e-n),s=Q(r),o=Math.min(1,e+n),i=Q(o),a=i.x-s.x,c=i.y-s.y;return a==0&&c==0?NaN:Math.atan2(c,a)}function e0(Q,e,n){const r=j1(Q,e,n*2),s=j1(Q,e,n*1),o=r-s;return s-o}const V=" *",C="(-?[0-9]+\\.?[0-9]*(?:[eE][-+]?[0-9]+)?)",I="(?: *[, ] *|(?=-))",n0=new RegExp(`^M${V}${C}${I}${C}(.*)$`),b0=new RegExp(`^m${V}${C}${I}${C}(.*)$`),r0=new RegExp(`^L${V}${C}${I}${C}(.*)$`),J1=new RegExp(`^${I}${C}${I}${C}(.*)$`),S0=new RegExp(`^l${V}${C}${I}${C}(.*)$`),C0=new RegExp(`^H${V}${C}(.*)$`),z0=new RegExp(`^h${V}${C}(.*)$`),T0=new RegExp(`^V${V}${C}(.*)$`),P0=new RegExp(`^v${V}${C}(.*)$`),s0=new RegExp(`^${I}${C}(.*)$`),F0=s0,i0=new RegExp(`^Q${V}${C}${I}${C}${I}${C}${I}${C}(.*)$`),I0=new RegExp(`^${I}${C}${I}${C}${I}${C}${I}${C}(.*)$`),N0=new RegExp(`^q${V}${C}${I}${C}${I}${C}${I}${C}(.*)$`),o0=new RegExp(`^C${V}${C}${I}${C}${I}${C}${I}${C}${I}${C}${I}${C}(.*)$`),G1=new RegExp(`^${I}${C}${I}${C}${I}${C}${I}${C}${I}${C}${I}${C}(.*)$`),_0=new RegExp(`^c${V}${C}${I}${C}${I}${C}${I}${C}${I}${C}${I}${C}(.*)$`),O0=new RegExp("^[zZ](.*)$");class R0 extends Error{constructor(e,n){super(e),this.where=n}}class N{getLength(){const e=M0(y0(u0(this.rawPath)));let n=0;return e.forEach((r,s)=>{if(s>0){const o=e[s-1];if(r[0]!="C")throw new Error("wtf");const a=o.at(-2),c=o.at(-1);if(typeof a!="number"||typeof c!="number")throw new Error("wtf");const h=[a,c,...r.slice(1)],l=new R(h);n+=l.length()}}),n}reverse(){return new N(this.commands.toReversed().map(e=>e.reverse()))}static fromString(e){const n=this.fromJson(e);if(n)return n;let r=e,s=null;const o=d=>new R0(d,r),i=d=>{const f=b.parseFloatX(d);if(f===void 0)throw o(`Invalid number: "${d}"`);return f};let a=0,c=0;const h=[],l=d=>{h.push(d),a=d.x,c=d.y};let u;for(;r=r.replace(/^ */,""),r!="";){if(s=n0.exec(r)){a=i(s[1]),c=i(s[2]),u={x0:a,y0:c},r=s[3];continue}if(s=b0.exec(r)){for(a+=i(s[1]),c+=i(s[2]),u={x0:a,y0:c},r=s[3];s=J1.exec(r);){const d=D.relative(a,c,i(s[1]),i(s[2]));l(d),r=s[3]}continue}if(!u)throw o("Must start with an M command.");if(s=O0.exec(r)){if(a!=u.x0||c!=u.y0){const d=new D(a,c,u.x0,u.y0);l(d)}r=s[1];continue}if(s=r0.exec(r)){const d=i(s[1]),f=i(s[2]),y=new D(a,c,d,f);l(y),r=s[3];continue}if(s=S0.exec(r)){for(;s;){const d=i(s[1]),f=i(s[2]),y=D.relative(a,c,d,f);l(y),r=s[3],s=J1.exec(r)}continue}if(s=C0.exec(r)){const d=i(s[1]),f=new D(a,c,d,c);l(f),r=s[2];continue}if(s=z0.exec(r)){for(;s;){const d=i(s[1]),f=new D(a,c,a+d,c);l(f),r=s[2],s=F0.exec(r)}continue}if(s=T0.exec(r)){const d=i(s[1]),f=new D(a,c,a,d);l(f),r=s[2];continue}if(s=P0.exec(r)){for(;s;){const d=i(s[1]),f=new D(a,c,a,c+d);l(f),r=s[2],s=s0.exec(r)}continue}if(s=i0.exec(r)){const d=i(s[1]),f=i(s[2]),y=i(s[3]),p=i(s[4]),g=X.controlPoints(a,c,d,f,y,p);l(g),r=s[5];continue}if(s=N0.exec(r)){for(;s;){const d=i(s[1]),f=i(s[2]),y=i(s[3]),p=i(s[4]),g=X.relative(a,c,d,f,y,p);l(g),r=s[5],s=I0.exec(r)}continue}if(s=o0.exec(r)){for(;s;){const d=i(s[1]),f=i(s[2]),y=i(s[3]),p=i(s[4]),g=i(s[5]),M=i(s[6]),k=new K(a,c,d,f,y,p,g,M);l(k),r=s[7],s=G1.exec(r)}continue}if(s=_0.exec(r)){for(;s;){const d=i(s[1]),f=i(s[2]),y=i(s[3]),p=i(s[4]),g=i(s[5]),M=i(s[6]),k=K.relative(a,c,d,f,y,p,g,M);l(k),r=s[7],s=G1.exec(r)}continue}throw o("Confused.")}return new this(h)}static fromJson(e){try{const r=JSON.parse(e).commands.map(s=>{switch(s.command){case"C":{const{x0:o,y0:i,x1:a,y1:c,x2:h,y2:l,x:u,y:d}=s;return new K(o,i,a,c,h,l,u,d)}case"L":{const{x0:o,y0:i,x:a,y:c}=s;return new D(o,i,a,c)}case"Q":{const{x0:o,y0:i,x:a,y:c,creationInfo:h}=s;switch(h.source){case"angles":{const{angle0:l,angle:u}=h,d=X.angles(o,i,l,a,c,u);return(d.creationInfo.source!="angles"||d.creationInfo.success!=h.success)&&console.warn("different",s,d),d}case"controlPoints":{const{x1:l,y1:u}=s;return X.controlPoints(o,i,l,u,a,c)}case"line":return X.line4(o,i,a,c);default:throw new Error(`Unknown source: "${h.source}"`)}}default:throw new Error(`Unknown command: "${s.command}"`)}});return new N(r)}catch{return}}matchForMorph(e){const n=this.commands.map(a=>a.toCubic()),r=e.commands.map(a=>a.toCubic());if(n.length!=r.length){const{shorter:a,longer:c}=n.length<r.length?{shorter:n,longer:r}:{shorter:r,longer:n};if(a.length==0)throw new Error("can't morph something into nothing");const h=c.length/a.length,l=[];a.forEach((u,d)=>{const f=Math.round((d+1)*h);for(;l.length<f;)l.push(u)}),a.length=0,a.push(...l)}if(n.length!=r.length)throw new Error("wtf");function s(a){return N.cssifyPath(a.map(c=>new N([c]).rawPath).join())}const o=s(n),i=s(r);return[o,i]}commands;get endX(){return this.commands.at(-1)?.x}get endY(){return this.commands.at(-1)?.y}get startX(){return this.commands.at(0)?.x0}get startY(){return this.commands.at(0)?.y0}constructor(e){this.commands=[...e]}static cssifyPath(e){return`path('${e}')`}get cssPath(){return N.cssifyPath(this.rawPath)}makeElement(e=!0){const n=document.createElementNS("http://www.w3.org/2000/svg","path");if(e){const r=this.cssPath;if(n.style.d=r,n.style.d=="")throw console.error(r,n),new Error("wtf")}else n.setAttribute("d",this.rawPath);return n}static needAnM(e,n){return n?!e||e.x!=n.x0||e.y!=n.y0:!1}get rawPath(){return this.splitOnMove().flatMap(e=>{const n=[`M ${j(e.startX)},${j(e.startY)}`];return e.commands.forEach(r=>n.push(r.asString)),e.startX==e.endX&&e.startY==e.endY&&n.push("Z"),n}).join(" ")}splitOnMove(){const e=[];let n=[];return this.commands.forEach(r=>{N.needAnM(n.at(-1),r)&&(n=[],e.push(n)),n.push(r)}),e.map(r=>new N(r))}static join(e){return new N(e.flatMap(({Δx:n,Δy:r,shape:s})=>s.translate(n,r).commands))}convertToCubics(){return new N(this.commands.map(e=>e.toCubic()))}translate(e,n){return new N(this.commands.map(r=>r.translate(e,n)))}transform(e){return new N(this.commands.map(n=>n.transform(e)))}static parametric(e,n){const r=e(0);return P1.M(r.x,r.y).addParametricPath(e,n).pathShape}static glitchFreeParametric(e,n){const r=this.#e(e,n,0);return b.assertNonNullable(r)}static#t=new t0;static#e(e,n,r){if(r>0&&console.log(r),r>=4){console.log("⚝");return}const o=this.parametric(e,n).commands.map((c,h,l)=>{const u=h/l.length,d=(h+1)/l.length;return{command:c,initialT:u,finalT:d}});let i=0;const a=c=>{const h=new this([c]);this.#t.d=h.rawPath;const l=this.#t.length,u=Math.hypot(c.x0-c.x,c.y0-c.y),d=l/u;return d<2||!isFinite(d)};for(;i<o.length;){const c=o[i].command;if(a(c))i++;else{const h=Math.max(0,i-1);let l=i+1;for(;l<o.length;){const k=o[l].command;if(l++,a(k))break}const u=o[h].initialT,d=o[l-1].finalT,f=b.makeLinear(0,u,1,d),y=k=>e(f(k)),p=l-h,g=p+1,M=this.#e(y,g,r+1);if(M===void 0){if(r>0)return;const k=o[i],{x0:E,y0:T,x:$,y:S}=k.command;k.command=X.line4(E,T,$,S),i++}else o.splice(h,p,...M.commands.map((k,E,T)=>{const $=f(E/T.length),S=f((E+1)/T.length);return{command:k,initialT:$,finalT:S}})),i+=g}}return new N(o.map(c=>c.command))}static fixAngleRounding(e){return e+400-400}static toDegrees(e){return Math.round(e*b.degreesPerRadian*100)/100}dump(){const e=this.commands.map((n,r)=>{const{x0:s,y0:o,x:i,y:a,incomingAngle:c,outgoingAngle:h,command:l}=n,u=document.createElementNS("http://www.w3.org/2000/svg","path");u.setAttribute("d",new N([n]).rawPath);const d=u.getTotalLength(),f=this.commands[r-1],p=N.needAnM(f,n)?{}:{difference:N.toDegrees(b.angleBetween(f.outgoingAngle,c))};return{x0:s,y0:o,x:i,y:a,incomingAngle:N.toDegrees(c),outgoingAngle:N.toDegrees(h),length:d,c:l,...p}});console.table(e),console.log(this.rawPath),console.log(JSON.stringify(this))}}function q0(Q,e){if(b.assertFinite(Q.x0,Q.y0,Q.angle,e.x0,e.y0,e.angle),isNaN(Q.angle)||isNaN(e.angle)||Q.angle==e.angle)return;const n=Math.tan(Q.angle),r=Math.tan(e.angle),s=Math.abs(n)*100>Number.MAX_SAFE_INTEGER,o=Math.abs(r)*100>Number.MAX_SAFE_INTEGER;if(s&&o)return;const i=Math.atan2(e.y0-Q.y0,e.x0-Q.x0),a=b.angleBetween(Q.angle,i),c=b.angleBetween(e.angle,i);if(a==0||Math.abs(c)==Math.PI){if(Math.abs(a)==Math.PI||c==0)return;const u=(Q.x0+e.x0)/2,d=(Q.y0+e.y0)/2;return{x:u,y:d}}const h=Math.sign(a),l=Math.sign(c);if(!(h!=l||h==0)&&!(Math.abs(c)<=Math.abs(a)+b.radiansPerDegree))if(s||o){const u=s?Q.x0:e.x0,d=s?{...e,slope:r}:{...Q,slope:n},f=d.slope*(u-d.x0)+d.y0;return{x:u,y:f}}else{const u=(e.y0-r*e.x0-Q.y0+n*Q.x0)/(n-r),d=n*(u-Q.x0)+Q.y0;return{x:u,y:d}}}function D0(Q){if(!(Q instanceof X))throw new Error("wtf");if(Q.creationInfo.source!="angles")throw new Error("wtf");return Q}class d1{constructor(e,n=16,r){this.f=e;const s=N.parametric(e,n);this.#e=s.commands.map((o,i,a)=>{const c=i/a.length,h=(i+1)/a.length;return this.#r(c,h,D0(o))}).sort((o,i)=>o.metric-i.metric),r===void 0&&(d1.#t.load(s),r=d1.#t.getBBox()),typeof r!="number"&&(r=Math.hypot(r.height,r.width)),this.#n=.001*r}static#t=new t0;#e;#n;get commands(){return this.#e}#s(e){this.#e.splice(this.#e.findLastIndex(n=>n.metric<=e.metric)+1,0,e)}#r(e,n,r){let o=0;{const c=[{x:r.x0,y:r.y0}];for(let h=1;h<4;h++){const l=h/4,u=b.lerp(e,n,l);c.push(this.f(u))}c.push({x:r.x,y:r.y}),c.forEach((h,l)=>{const u=c[l+1];u&&(o+=Math.hypot(h.x-u.x,h.y-u.y))})}const i=d1.#t.measure(r),a=Math.abs(o-i);return r.creationInfo.success,{startT:e,endT:n,command:r,polyLineLength:o,curveLength:i,metric:a}}add(e){for(let n=0;n<e;n++)this.addOne()}addOne(){const e=this.#e.pop(),{startT:n,endT:r}=e,s=(n+r)/2,o=this.f(s),i=1e-4*(s-n),a=e0(this.f,s,i),c=X.angles(e.command.x0,e.command.y0,e.command.requestedIncomingAngle,o.x,o.y,a),h=this.#r(n,s,c);this.#s(h);const l=X.angles(o.x,o.y,a,e.command.x,e.command.y,e.command.requestedOutgoingAngle),u=this.#r(s,r,l);return this.#s(u),{toSplit:e,firstCommandInfo:h,secondCommandInfo:u}}done(){return this.commands.at(-1).metric<this.#n}go(e=50){for(let n=0;n<e&&!this.done();n++)this.addOne()}get pathShape(){return new N(this.#e.toSorted((e,n)=>e.startT-n.startT).map(({command:e})=>e))}summarize(){function e(n){n.sort((l,u)=>l-u);const r=n.length;function s(l){const d=(n.length-1)*l;if(Number.isInteger(d))return n[d];{const f=Math.floor(d),y=f+1,p=d-f;return b.lerp(n[f],n[y],p)}}if(n.length<2)throw new Error("wtf");const o=b.initializedArray(5,l=>s(l/4));let i=0,a=0;n.forEach(l=>{i+=l,a+=l*l});const c=i/r,h=Math.sqrt((a-r*c*c)/(r-1));return{quartiles:o,mean:c,standardDeviation:h}}return{polyLineLength:e(this.#e.map(({polyLineLength:n})=>n)),curveLength:e(this.#e.map(({curveLength:n})=>n)),metric:e(this.#e.map(({metric:n})=>n)),tCoverage:e(this.#e.map(({startT:n,endT:r})=>r-n)),generation:e(this.#e.map(({startT:n,endT:r})=>-Math.log2(r-n))),count:this.#e.length}}dump(){console.table(this.commands.map(({startT:e,endT:n,metric:r,curveLength:s})=>({startT:e,tCoverage:n-e,generation:-Math.log2(n-e),metric:r,curveLength:s})))}static chordRatio(e){const n=b.FULL_CIRCLE/e,r=2*Math.sin(n/2);return n/r}}window.ParametricToPath=d1;class V1{top;bottom;width;letters;spaceAfter;constructor(e,n){const r=n.getWord(e);let s=0;this.letters=r.map(a=>{const c={x:s,description:a};return s+=a.advance+n.kerning,c});const o=this.letters.at(-1);this.width=o?o.x+o.description.advance:0,this.top=n.top,this.bottom=n.bottom;let i=0;[...e].forEach(a=>{a==" "&&i++}),this.spaceAfter=i*n.spaceWidth+n.kerning}}class X0{}class U0{constructor(e){this.font=e}#t=[];addWord(e,n=this.font){const r=new V1(e,n);return this.#t.push(r),r}addText(e,n=this.font){const r=[];for(const s of e.matchAll(/(\n)|([^ \n]*(( +)|$|(?=\n)))/gms)){const o=s[0];if(o[0]==`
`)for(let i=0;i<o.length;i++)this.addLineBreak();else o!=""&&this.addWord(o,n)}return r}addLineBreak(){this.#t.push(new X0)}align(e=1/0,n="left"){const r=[[]],s=new Set;let o=0;for(this.#t.forEach(y=>{if(y instanceof V1)o>0&&o+y.width>e&&(o=0,r.push([])),o+=y.width+y.spaceAfter,r.at(-1).push(y);else{const p=r.length-1;s.add(p),o=0,r.push([])}});r.length>0&&r.at(-1).length==0;)r.pop();let i=0;const a=new Array;r.forEach(y=>{if(y.length==0){const p=i,g=p-this.font.top,M=g+this.font.bottom;a.push({top:p,baseline:g,bottom:M,minWidth:0}),i=M}else{const p=i,g=p-Math.min(...y.map(E=>E.top)),M=g+Math.max(...y.map(E=>E.bottom)),k=b.sum(y.map(E=>E.width+E.spaceAfter))-y.at(-1).spaceAfter;a.push({top:p,baseline:g,bottom:M,minWidth:k}),i=M}});const c=new Array;e==1/0&&(e=Math.max(...a.map(({minWidth:y})=>y))),r.forEach((y,p)=>{const g=a[p],M=g.baseline;function k(){let S=(e-g.minWidth)/2;y.forEach(A=>{c.push({x:S,baseline:M,wordInfo:A}),S+=A.width+A.spaceAfter})}function E(){let S=0;y.forEach(A=>{c.push({x:S,baseline:M,wordInfo:A}),S+=A.width+A.spaceAfter})}function T(){let S=e-g.minWidth;y.forEach(A=>{c.push({x:S,baseline:M,wordInfo:A}),S+=A.width+A.spaceAfter})}function $(){const S=(e-g.minWidth)/(y.length-1);let A=0;y.forEach(z=>{c.push({x:A,baseline:M,wordInfo:z}),A+=z.width+z.spaceAfter+S})}switch(n){case"center":{k();break}case"left":{E();break}case"right":{T();break}case"justify":{p==r.length-1||s.has(p)?E():$();break}default:throw new Error("wtf")}});function*h(y=0,p=0){for(const g of c)for(const M of g.wordInfo.letters){const k=y+g.x+M.x,E=p+g.baseline;yield{x:k,baseline:E,letter:M.description,translatedShape:M.description.shape.translate(k,E),word:g}}}function l(y,p=0,g=0){y.lineCap="round",y.lineJoin="round";for(const M of h(p,g)){const k=new Path2D(M.translatedShape.rawPath);y.stroke(k)}}function u(y=0,p=0){let g=0;const M=[...h(y,p)].flatMap(({translatedShape:T})=>T.splitOnMove()).map(T=>{const $=T.getLength(),S=g+$,z={path:new Path2D(T.rawPath),start:g,length:$,end:S};return g=S,z}),k=g;function E(T,$){$.lineCap="round",$.lineJoin="round";for(const S of M){if(T<=S.start)break;T>=S.end?$.setLineDash([]):$.setLineDash([T-S.start,k]),$.stroke(S.path)}}return{totalLength:k,drawTo:E}}function d(){const y=[...h()].flatMap(({translatedShape:p})=>p.commands);return new N(y)}return{height:a.at(-1)?.bottom??0,width:e,words:c,allRowMetrics:a,getAllLetters:h,drawAll:l,drawPartial:u,singlePathShape:d}}}const W0=-26,Z0=8,H0=16,j0=1,J0=0,G0=21,V0=JSON.parse('[{"key":" ","d":"","advance":16},{"key":"!","d":"M 5,-21 L 5,-7 M 5,-2 Q 4,-2 4,-1 Q 4,0.00000000000000012246468 5,0 Q 6,0 6,-1 Q 6,-2 5,-2 Z","advance":10},{"key":"\\"","d":"M 4,-21 L 4,-14 M 12,-21 L 12,-14","advance":16},{"key":"#","d":"M 11,-25 L 4,7 M 17,-25 L 10,7 M 4,-12 L 18,-12 M 3,-6 L 17,-6","advance":21},{"key":"$","d":"M 8,-25 L 8,4 M 12,-25 L 12,4 M 17,-18 Q 16.236068,-19.236068 15,-20 Q 13.874032,-20.695886 12,-21 Q 10,-21.324555 8,-21 Q 6.125968,-20.695886 5,-20 Q 3.4253094,-19.026788 3,-18 Q 2.6992609,-17.273951 3,-16 Q 3.2150407,-15.089073 4,-14 Q 4.4188612,-13.418861 5,-13 Q 5.8603796,-12.379873 7,-12 L 13,-10 Q 14.13962,-9.6201265 15,-9 Q 15.581139,-8.5811388 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.451109,-4.0890728 17,-3 Q 16.574691,-1.9732123 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.763932,-1.763932 3,-3","advance":20},{"key":"%","d":"M 21,-21 L 3,0 M 8,-21 Q 9.4142136,-20.414214 10,-19 Q 10.300739,-18.273951 10,-17 Q 9.690983,-15.690983 9,-15 Q 8.309017,-14.309017 7,-14 Q 5.7260485,-13.699261 5,-14 Q 3.5857864,-14.585786 3,-16 Q 2.6992609,-16.726049 3,-18 Q 3.309017,-19.309017 4,-20 Q 4.690983,-20.690983 6,-21 Q 7.3585702,-21.320715 8,-21 L 10,-20 Q 11.519494,-19.240253 13,-19 Q 14.5,-18.756584 16,-19 Q 16.963105,-19.15629 19,-20 Q 20.035534,-20.428932 21,-21 M 17,-7 Q 15.833333,-6.8333333 15,-6 Q 14.309017,-5.309017 14,-4 Q 13.699261,-2.7260485 14,-2 Q 14.585786,-0.58578644 16,0 Q 16.726049,0.30073915 18,0 Q 19.309017,-0.30901699 20,-1 Q 20.690983,-1.690983 21,-3 Q 21.300739,-4.2739515 21,-5 Q 20.414214,-6.4142136 19,-7 Q 18,-7.4142136 17,-7 Z","advance":24},{"key":"&","d":"M 23,-12 Q 23.207107,-12.5 23,-13 Q 22.707107,-13.707107 22,-14 Q 21.5,-14.207107 21,-14 Q 20.60191,-13.835106 20,-13 Q 19.550592,-12.376479 19,-11 L 17,-6 Q 16.562261,-4.9056517 15,-3 Q 13.880899,-1.6349159 13,-1 Q 11.910927,-0.21504074 11,0 Q 9,0.47213595 7,0 Q 6.0890728,-0.21504074 5,-1 Q 4.4188612,-1.4188612 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.763932,-5 3,-6 Q 3.2150407,-6.9109272 4,-8 Q 4.5252118,-8.7286925 5,-9 L 12,-13 Q 12.474788,-13.271308 13,-14 Q 13.784959,-15.089073 14,-16 Q 14.236068,-17 14,-18 Q 13.690983,-19.309017 13,-20 Q 12,-21 11,-21 Q 10,-21 9,-20 Q 8.309017,-19.309017 8,-18 Q 7.8076617,-17.185242 8,-16 Q 8.2320166,-14.570249 9,-13 Q 9.1717605,-12.648812 11,-10 Q 15.090218,-4.0739613 16,-3 Q 17.214879,-1.5658828 18,-1 Q 19.089073,-0.21504074 20,0 Q 21.273951,0.30073915 22,0 Q 22.707107,-0.29289322 23,-1 Q 23.207107,-1.5 23,-2","advance":26},{"key":"’","d":"M 5,-19 Q 4,-19 4,-20 Q 4,-21 5,-21 Q 5.5857864,-21 6,-20 Q 6.3007391,-19.273951 6,-18 Q 5.7849593,-17.089073 5,-16 Q 4.5811388,-15.418861 4,-15","advance":10},{"key":"(","d":"M 11,-25 Q 9.9009805,-24.09902 9,-23 Q 8.1132681,-21.918361 7,-20 Q 5.4647144,-17.354427 5,-16 Q 4.2902733,-13.931476 4,-11 Q 3.801961,-9 4,-7 Q 4.2902733,-4.0685242 5,-2 Q 5.4647144,-0.64557287 7,2 Q 8.1132681,3.918361 9,5 Q 9.9009805,6.0990195 11,7","advance":14},{"key":")","d":"M 3,-25 Q 4.0990195,-24.09902 5,-23 Q 5.8867319,-21.918361 7,-20 Q 8.5352856,-17.354427 9,-16 Q 9.7097267,-13.931476 10,-11 Q 10.198039,-9 10,-7 Q 9.7097267,-4.0685242 9,-2 Q 8.5352856,-0.64557287 7,2 Q 5.8867319,3.918361 5,5 Q 4.0990195,6.0990195 3,7","advance":14},{"key":"*","d":"M 8,-15 L 8,-3 M 3,-12 L 13,-6 M 13,-12 L 3,-6","advance":16},{"key":"+","d":"M 13,-18 L 13,0 M 4,-9 L 22,-9","advance":26},{"key":",","d":"M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"-","d":"M 4,-9 L 22,-9","advance":26},{"key":".","d":"M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":"/","d":"M 20,-25 L 2,7","advance":22},{"key":"0","d":"M 9,-21 Q 7.3284461,-21.014662 6,-20 Q 4.8921428,-19.153823 4,-17 Q 3.3364804,-15.398122 3,-12 Q 2.8514707,-10.5 3,-9 Q 3.3364804,-5.6018781 4,-4 Q 4.8921428,-1.8461767 6,-1 Q 6.8531197,-0.34839071 9,0 Q 10,0.16227766 11,0 Q 13.14688,-0.34839071 14,-1 Q 15.107857,-1.8461767 16,-4 Q 16.66352,-5.6018781 17,-9 Q 17.148529,-10.5 17,-12 Q 16.66352,-15.398122 16,-17 Q 15.107857,-19.153823 14,-20 Q 13.14688,-20.651609 11,-21 Q 10,-21.162278 9,-21 Z","advance":20},{"key":"1","d":"M 6,-17 Q 7.0811388,-17.337722 8,-18 Q 9.7434165,-19.256584 11,-21 L 11,0","advance":20},{"key":"2","d":"M 4,-16 Q 3.881966,-16.5 4,-17 Q 4.2150407,-17.910927 5,-19 Q 5.4188612,-19.581139 6,-20 Q 7.0890728,-20.784959 8,-21 Q 10,-21.472136 12,-21 Q 12.910927,-20.784959 14,-20 Q 14.581139,-19.581139 15,-19 Q 15.784959,-17.910927 16,-17 Q 16.236068,-16 16,-15 Q 15.88984,-14.533354 15,-13 Q 13.617218,-10.617218 13,-10 L 3,0 L 17,0","advance":20},{"key":"3","d":"M 5,-21 L 16,-21 L 10,-13 Q 11.5,-13.354102 13,-13 Q 13.910927,-12.784959 15,-12 Q 15.68879,-11.503548 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"4","d":"M 13,-21 L 3,-7 L 18,-7 M 13,-21 L 13,0","advance":20},{"key":"5","d":"M 15,-21 L 5,-21 L 4,-12 Q 4.381966,-12.618034 5,-13 Q 6.125968,-13.695886 8,-14 Q 9.5,-14.243416 11,-14 Q 12.874032,-13.695886 14,-13 Q 15.236068,-12.236068 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"6","d":"M 16,-18 Q 15.914214,-19.207107 15,-20 Q 14.272122,-20.631285 12,-21 Q 11,-21.162278 10,-21 Q 7.8531197,-20.651609 7,-20 Q 5.8921428,-19.153823 5,-17 Q 4.3364804,-15.398122 4,-12 Q 3.7256083,-9.2289128 4,-7 Q 4.3513984,-4.145554 5,-3 Q 5.6653554,-1.8248557 7,-1 Q 8.125968,-0.30411354 10,0 Q 10.5,0.08113883 11,0 Q 12.874032,-0.30411354 14,-1 Q 15.236068,-1.763932 16,-3 Q 16.695886,-4.125968 17,-6 Q 17.081139,-6.5 17,-7 Q 16.695886,-8.874032 16,-10 Q 15.236068,-11.236068 14,-12 Q 12.874032,-12.695886 11,-13 Q 10.5,-13.081139 10,-13 Q 8.125968,-12.695886 7,-12 Q 5.763932,-11.236068 5,-10 Q 4.145898,-8.618034 4,-7","advance":20},{"key":"7","d":"M 17,-21 L 7,0 M 3,-21 L 17,-21","advance":20},{"key":"8","d":"M 8,-21 Q 6.2928932,-21.12132 5,-20 Q 4.3362366,-19.424321 4,-18 Q 3.763932,-17 4,-16 Q 4.309017,-14.690983 5,-14 Q 5.6666667,-13.333333 7,-13 L 11,-12 Q 13.320715,-11.419821 14,-11 Q 15.007096,-10.37758 16,-9 Q 16.784959,-7.9109272 17,-7 Q 17.354102,-5.5 17,-4 Q 16.784959,-3.0890728 16,-2 Q 15.503548,-1.3112099 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.645898,-5.5 3,-7 Q 3.2150407,-7.9109272 4,-9 Q 4.9929036,-10.37758 6,-11 Q 6.6792851,-11.419821 9,-12 L 13,-13 Q 14.333333,-13.333333 15,-14 Q 15.690983,-14.690983 16,-16 Q 16.236068,-17 16,-18 Q 15.663763,-19.424321 15,-20 Q 14.272122,-20.631285 12,-21 Q 10,-21.324555 8,-21 Z","advance":20},{"key":"9","d":"M 16,-14 Q 15.854102,-12.381966 15,-11 Q 14.236068,-9.763932 13,-9 Q 11.874032,-8.3041135 10,-8 Q 9.5,-7.9188612 9,-8 Q 7.125968,-8.3041135 6,-9 Q 4.763932,-9.763932 4,-11 Q 3.3041135,-12.125968 3,-14 Q 2.9188612,-14.5 3,-15 Q 3.3041135,-16.874032 4,-18 Q 4.763932,-19.236068 6,-20 Q 7.125968,-20.695886 9,-21 Q 9.5,-21.081139 10,-21 Q 11.874032,-20.695886 13,-20 Q 14.334645,-19.175144 15,-18 Q 15.648602,-16.854446 16,-14 Q 16.274392,-11.771087 16,-9 Q 15.66352,-5.6018781 15,-4 Q 14.107857,-1.8461767 13,-1 Q 12.14688,-0.34839071 10,0 Q 9,0.16227766 8,0 Q 5.7278782,-0.36871462 5,-1 Q 4.0857864,-1.7928932 4,-3","advance":20},{"key":":","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":";","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"<","d":"M 20,-18 L 4,-9 L 20,0","advance":24},{"key":"=","d":"M 4,-12 L 22,-12 M 4,-6 L 22,-6","advance":26},{"key":">","d":"M 4,-18 L 20,-9 L 4,0","advance":24},{"key":"?","d":"M 3,-16 Q 2.881966,-16.5 3,-17 Q 3.2150407,-17.910927 4,-19 Q 4.4188612,-19.581139 5,-20 Q 6.0890728,-20.784959 7,-21 Q 9,-21.472136 11,-21 Q 11.910927,-20.784959 13,-20 Q 13.581139,-19.581139 14,-19 Q 14.784959,-17.910927 15,-17 Q 15.236068,-16 15,-15 Q 14.784959,-14.089073 14,-13 Q 13.581139,-12.418861 13,-12 Q 11.162278,-10.675445 9,-10 L 9,-7 M 9,-2 Q 8,-2 8,-1 Q 8,0.00000000000000012246468 9,0 Q 10,0 10,-1 Q 10,-2 9,-2 Z","advance":18},{"key":"@","d":"M 18,-13 Q 17.833333,-14.166667 17,-15 Q 16.309017,-15.690983 15,-16 Q 13.5,-16.354102 12,-16 Q 11.089073,-15.784959 10,-15 Q 9.3112099,-14.503548 9,-14 Q 8.3041135,-12.874032 8,-11 Q 7.7114926,-9.2221371 8,-8 Q 8.309017,-6.690983 9,-6 Q 9.690983,-5.309017 11,-5 Q 12.5,-4.645898 14,-5 Q 15.309017,-5.309017 16,-6 Q 16.833333,-6.8333333 17,-8 M 12,-16 Q 10.763932,-15.236068 10,-14 Q 9.3041135,-12.874032 9,-11 Q 8.7114926,-9.2221371 9,-8 Q 9.2150407,-7.0890728 10,-6 Q 10.418861,-5.4188612 11,-5 M 18,-16 L 17,-8 Q 16.792057,-6.3364584 17,-6 Q 17.381966,-5.381966 19,-5 Q 20.273951,-4.6992609 21,-5 Q 22.026788,-5.4253094 23,-7 Q 23.695886,-8.125968 24,-10 Q 24.162278,-11 24,-12 Q 23.84371,-12.963105 23,-15 Q 22.403407,-16.440302 22,-17 Q 21.162278,-18.162278 20,-19 Q 19.440302,-19.403407 18,-20 Q 15.963105,-20.84371 15,-21 Q 13.5,-21.243416 12,-21 Q 11.036895,-20.84371 9,-20 Q 7.5596976,-19.403407 7,-19 Q 5.8377223,-18.162278 5,-17 Q 4.5965928,-16.440302 4,-15 Q 3.1562904,-12.963105 3,-12 Q 2.7565835,-10.5 3,-9 Q 3.1562904,-8.0368952 4,-6 Q 4.5965928,-4.5596976 5,-4 Q 5.8377223,-2.8377223 7,-2 Q 7.5596976,-1.5965928 9,-1 Q 11.036895,-0.1562904 12,0 Q 13.5,0.24341649 15,0 Q 15.963105,-0.1562904 18,-1 Q 19.440302,-1.5965928 20,-2 Q 20.581139,-2.4188612 21,-3 M 19,-16 L 18,-8 Q 17.807955,-6.4636382 18,-6 Q 18.292893,-5.2928932 19,-5","advance":27},{"key":"A","d":"M 9,-21 L 1,0 M 9,-21 L 17,0 M 4,-7 L 14,-7","advance":18},{"key":"B","d":"M 4,-21 L 4,0 M 4,-21 L 13,-21 Q 14.381966,-21 16,-20 Q 16.503548,-19.68879 17,-19 Q 17.784959,-17.910927 18,-17 Q 18.236068,-16 18,-15 Q 17.784959,-14.089073 17,-13 Q 16.503548,-12.31121 16,-12 Q 14.618034,-11.145898 13,-11 M 4,-11 L 13,-11 Q 14.381966,-11 16,-10 Q 16.503548,-9.6887901 17,-9 Q 17.784959,-7.9109272 18,-7 Q 18.354102,-5.5 18,-4 Q 17.784959,-3.0890728 17,-2 Q 16.503548,-1.3112099 16,-1 Q 14.381966,0.0000000000000002220446 13,0 L 4,0","advance":21},{"key":"C","d":"M 18,-16 Q 17.662278,-17.081139 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Q 8.0890728,-20.784959 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.662278,-3.9188612 18,-5","advance":21},{"key":"D","d":"M 4,-21 L 4,0 M 4,-21 L 11,-21 Q 12.381966,-21 14,-20 Q 15.007096,-19.37758 16,-18 Q 16.403407,-17.440302 17,-16 Q 17.84371,-13.963105 18,-13 Q 18.405694,-10.5 18,-8 Q 17.84371,-7.0368952 17,-5 Q 16.403407,-3.5596976 16,-3 Q 15.007096,-1.6224198 14,-1 Q 12.381966,0.0000000000000002220446 11,0 L 4,0","advance":21},{"key":"E","d":"M 4,-21 L 4,0 M 4,-21 L 17,-21 M 4,-11 L 12,-11 M 4,0 L 17,0","advance":19},{"key":"F","d":"M 4,-21 L 4,0 M 4,-21 L 17,-21 M 4,-11 L 12,-11","advance":18},{"key":"G","d":"M 18,-16 Q 17.662278,-17.081139 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Q 8.0890728,-20.784959 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.784959,-4.0890728 18,-5 Q 18.354102,-6.5 18,-8 M 13,-8 L 18,-8","advance":21},{"key":"H","d":"M 4,-21 L 4,0 M 18,-21 L 18,0 M 4,-11 L 18,-11","advance":22},{"key":"I","d":"M 4,-21 L 4,0","advance":8},{"key":"J","d":"M 12,-21 L 12,-5 Q 12,-3.618034 11,-2 Q 10.68879,-1.4964518 10,-1 Q 8.9109272,-0.21504074 8,0 Q 7,0.23606798 6,0 Q 5.0890728,-0.21504074 4,-1 Q 3.3112099,-1.4964518 3,-2 Q 2.3041135,-3.125968 2,-5 Q 1.8377223,-6 2,-7","advance":16},{"key":"K","d":"M 4,-21 L 4,0 M 18,-21 L 4,-7 M 9,-12 L 18,0","advance":21},{"key":"L","d":"M 4,-21 L 4,0 L 16,0","advance":17},{"key":"M","d":"M 4,-21 L 4,0 M 4,-21 L 12,0 M 20,-21 L 12,0 M 20,-21 L 20,0","advance":24},{"key":"N","d":"M 4,-21 L 4,0 M 4,-21 L 18,0 M 18,-21 L 18,0","advance":22},{"key":"O","d":"M 9,-21 Q 7.9188612,-20.662278 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.403407,-3.5596976 18,-5 Q 18.84371,-7.0368952 19,-8 Q 19.405694,-10.5 19,-13 Q 18.84371,-13.963105 18,-16 Q 17.403407,-17.440302 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Z","advance":22},{"key":"P","d":"M 4,-21 L 4,0 M 4,-21 L 13,-21 Q 14.381966,-21 16,-20 Q 16.503548,-19.68879 17,-19 Q 17.784959,-17.910927 18,-17 Q 18.354102,-15.5 18,-14 Q 17.784959,-13.089073 17,-12 Q 16.503548,-11.31121 16,-11 Q 14.381966,-10 13,-10 L 4,-10","advance":21},{"key":"Q","d":"M 9,-21 Q 7.9188612,-20.662278 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.403407,-3.5596976 18,-5 Q 18.84371,-7.0368952 19,-8 Q 19.405694,-10.5 19,-13 Q 18.84371,-13.963105 18,-16 Q 17.403407,-17.440302 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Z M 12,-4 L 18,2","advance":22},{"key":"R","d":"M 4,-21 L 4,0 M 4,-21 L 13,-21 Q 14.381966,-21 16,-20 Q 16.503548,-19.68879 17,-19 Q 17.784959,-17.910927 18,-17 Q 18.236068,-16 18,-15 Q 17.784959,-14.089073 17,-13 Q 16.503548,-12.31121 16,-12 Q 14.381966,-11 13,-11 L 4,-11 M 11,-11 L 18,0","advance":21},{"key":"S","d":"M 17,-18 Q 16.236068,-19.236068 15,-20 Q 13.874032,-20.695886 12,-21 Q 10,-21.324555 8,-21 Q 6.125968,-20.695886 5,-20 Q 3.4253094,-19.026788 3,-18 Q 2.6992609,-17.273951 3,-16 Q 3.2150407,-15.089073 4,-14 Q 4.4188612,-13.418861 5,-13 Q 5.8603796,-12.379873 7,-12 L 13,-10 Q 14.13962,-9.6201265 15,-9 Q 15.581139,-8.5811388 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.451109,-4.0890728 17,-3 Q 16.574691,-1.9732123 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.763932,-1.763932 3,-3","advance":20},{"key":"T","d":"M 8,-21 L 8,0 M 1,-21 L 15,-21","advance":16},{"key":"U","d":"M 4,-21 L 4,-6 Q 4,-4.618034 5,-3 Q 5.763932,-1.763932 7,-1 Q 8.125968,-0.30411354 10,0 Q 11,0.16227766 12,0 Q 13.874032,-0.30411354 15,-1 Q 16.236068,-1.763932 17,-3 Q 18,-4.618034 18,-6 L 18,-21","advance":22},{"key":"V","d":"M 1,-21 L 9,0 M 17,-21 L 9,0","advance":18},{"key":"W","d":"M 2,-21 L 7,0 M 12,-21 L 7,0 M 12,-21 L 17,0 M 22,-21 L 17,0","advance":24},{"key":"X","d":"M 3,-21 L 17,0 M 17,-21 L 3,0","advance":20},{"key":"Y","d":"M 1,-21 L 9,-11 L 9,0 M 17,-21 L 9,-11","advance":18},{"key":"Z","d":"M 17,-21 L 3,0 M 3,-21 L 17,-21 M 3,0 L 17,0","advance":20},{"key":"[","d":"M 4,-25 L 4,7 M 5,-25 L 5,7 M 4,-25 L 11,-25 M 4,7 L 11,7","advance":14},{"key":"\\\\","d":"M 0,-21 L 14,3","advance":14},{"key":"]","d":"M 9,-25 L 9,7 M 10,-25 L 10,7 M 3,-25 L 10,-25 M 3,7 L 10,7","advance":14},{"key":"^","d":"M 8,-23 L 0,-9 M 8,-23 L 16,-9","advance":16},{"key":"_","d":"M 0,7 L 18,7","advance":18},{"key":"‘","d":"M 5,-16 Q 3.5857864,-15.414214 3,-14 Q 2.5857864,-13 3,-12 Q 3.4142136,-11 4,-11 Q 5,-11 5,-12 Q 5,-13 4,-13 Q 3,-13 3,-12","advance":8},{"key":"a","d":"M 15,-14 L 15,0 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"b","d":"M 4,-21 L 4,0 M 4,-11 Q 4.8377223,-12.162278 6,-13 Q 7.0890728,-13.784959 8,-14 Q 9.5,-14.354102 11,-14 Q 11.910927,-13.784959 13,-13 Q 14.37758,-12.007096 15,-11 Q 15.695886,-9.874032 16,-8 Q 16.162278,-7 16,-6 Q 15.695886,-4.125968 15,-3 Q 14.37758,-1.9929036 13,-1 Q 11.910927,-0.21504074 11,0 Q 9.5,0.35410197 8,0 Q 7.0890728,-0.21504074 6,-1 Q 4.8377223,-1.8377223 4,-3","advance":19},{"key":"c","d":"M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":18},{"key":"d","d":"M 15,-21 L 15,0 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"e","d":"M 3,-8 L 15,-8 Q 15.472136,-8 15,-10 Q 14.784959,-10.910927 14,-12 Q 13.581139,-12.581139 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":18},{"key":"f","d":"M 10,-21 Q 9,-21.236068 8,-21 Q 6.575679,-20.663763 6,-20 Q 5,-18.84699 5,-17 L 5,0 M 2,-14 L 9,-14","advance":12},{"key":"g","d":"M 15,-14 L 15,2 Q 15,3.381966 14,5 Q 13.68879,5.5035482 13,6 Q 11.910927,6.7849593 11,7 Q 9.5,7.354102 8,7 Q 6.881966,6.736068 6,6 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"h","d":"M 4,-21 L 4,0 M 4,-10 Q 5.2565835,-11.743416 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14 Q 13.424321,-13.663763 14,-13 Q 15,-11.84699 15,-10 L 15,0","advance":19},{"key":"i","d":"M 3,-21 Q 3,-20 4,-20 Q 5,-20 5,-21 Q 5,-22 4,-22 Q 3,-22 3,-21 Z M 4,-14 L 4,0","advance":8},{"key":"j","d":"M 5,-21 Q 5,-20 6,-20 Q 7,-20 7,-21 Q 7,-22 6,-22 Q 5,-22 5,-21 Z M 6,-14 L 6,3 Q 6,4.8469903 5,6 Q 4.424321,6.6637634 3,7 Q 2,7.236068 1,7","advance":10},{"key":"k","d":"M 4,-21 L 4,0 M 14,-14 L 4,-4 M 8,-8 L 15,0","advance":17},{"key":"l","d":"M 4,-21 L 4,0","advance":8},{"key":"m","d":"M 4,-14 L 4,0 M 4,-10 Q 5.2565835,-11.743416 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14 Q 13.424321,-13.663763 14,-13 Q 15,-11.84699 15,-10 L 15,0 M 15,-10 Q 16.256584,-11.743416 18,-13 Q 19.089073,-13.784959 20,-14 Q 21.5,-14.354102 23,-14 Q 24.424321,-13.663763 25,-13 Q 26,-11.84699 26,-10 L 26,0","advance":30},{"key":"n","d":"M 4,-14 L 4,0 M 4,-10 Q 5.2565835,-11.743416 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14 Q 13.424321,-13.663763 14,-13 Q 15,-11.84699 15,-10 L 15,0","advance":19},{"key":"o","d":"M 8,-14 Q 6.9188612,-13.662278 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.37758,-1.9929036 15,-3 Q 15.695886,-4.125968 16,-6 Q 16.162278,-7 16,-8 Q 15.695886,-9.874032 15,-11 Q 14.37758,-12.007096 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Z","advance":19},{"key":"p","d":"M 4,-14 L 4,7 M 4,-11 Q 4.8377223,-12.162278 6,-13 Q 7.0890728,-13.784959 8,-14 Q 9.5,-14.354102 11,-14 Q 11.910927,-13.784959 13,-13 Q 14.37758,-12.007096 15,-11 Q 15.695886,-9.874032 16,-8 Q 16.162278,-7 16,-6 Q 15.695886,-4.125968 15,-3 Q 14.37758,-1.9929036 13,-1 Q 11.910927,-0.21504074 11,0 Q 9.5,0.35410197 8,0 Q 7.0890728,-0.21504074 6,-1 Q 4.8377223,-1.8377223 4,-3","advance":19},{"key":"q","d":"M 15,-14 L 15,7 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"r","d":"M 4,-14 L 4,0 M 4,-8 Q 4.145898,-9.618034 5,-11 Q 5.6224198,-12.007096 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14","advance":13},{"key":"s","d":"M 14,-11 Q 13.914214,-12.207107 13,-13 Q 12.272122,-13.631285 10,-14 Q 8.5,-14.243416 7,-14 Q 4.7278782,-13.631285 4,-13 Q 3,-12.132705 3,-11 Q 3,-10 4,-9 Q 4.75,-8.25 6,-8 L 11,-7 Q 12.25,-6.75 13,-6 Q 13.690983,-5.309017 14,-4 Q 14.118034,-3.5 14,-3 Q 13.663763,-1.575679 13,-1 Q 12.272122,-0.36871462 10,0 Q 8.5,0.24341649 7,0 Q 4.7278782,-0.36871462 4,-1 Q 3.0857864,-1.7928932 3,-3","advance":17},{"key":"t","d":"M 5,-21 L 5,-4 Q 5,-2.1530097 6,-1 Q 6.575679,-0.33623659 8,0 Q 9,0.23606798 10,0 M 2,-14 L 9,-14","advance":12},{"key":"u","d":"M 4,-14 L 4,-4 Q 4,-2.1530097 5,-1 Q 5.575679,-0.33623659 7,0 Q 8.5,0.35410197 10,0 Q 10.910927,-0.21504074 12,-1 Q 13.743416,-2.2565835 15,-4 M 15,-14 L 15,0","advance":19},{"key":"v","d":"M 2,-14 L 8,0 M 14,-14 L 8,0","advance":16},{"key":"w","d":"M 3,-14 L 7,0 M 11,-14 L 7,0 M 11,-14 L 15,0 M 19,-14 L 15,0","advance":22},{"key":"x","d":"M 3,-14 L 14,0 M 14,-14 L 3,0","advance":17},{"key":"y","d":"M 2,-14 L 8,0 M 14,-14 L 8,0 Q 6.7047906,3.0221553 6,4 Q 5.1622777,5.1622777 4,6 Q 2.9109272,6.7849593 2,7 Q 1.5,7.118034 1,7","advance":16},{"key":"z","d":"M 14,-14 L 3,0 M 3,-14 L 14,-14 M 3,0 L 14,0","advance":17},{"key":"{","d":"M 9,-25 Q 7.9188612,-24.662278 7,-24 Q 6.4188612,-23.581139 6,-23 Q 5.2150407,-21.910927 5,-21 Q 4.763932,-20 5,-19 Q 5.309017,-17.690983 6,-17 L 7,-16 Q 7.690983,-15.309017 8,-14 Q 8.3007391,-12.726049 8,-12 Q 7.4142136,-10.585786 6,-10 M 7,-24 Q 6.263932,-23.118034 6,-22 Q 5.763932,-21 6,-20 Q 6.309017,-18.690983 7,-18 L 8,-17 Q 8.690983,-16.309017 9,-15 Q 9.236068,-14 9,-13 Q 8.690983,-11.690983 8,-11 Q 6.3333333,-9.3333333 4,-9 Q 6.3333333,-8.6666667 8,-7 Q 8.690983,-6.309017 9,-5 Q 9.236068,-4 9,-3 Q 8.690983,-1.690983 8,-1 L 7,0 Q 6.309017,0.69098301 6,2 Q 5.763932,3 6,4 Q 6.263932,5.118034 7,6 M 6,-8 Q 7.4142136,-7.4142136 8,-6 Q 8.3007391,-5.2739515 8,-4 Q 7.690983,-2.690983 7,-2 L 6,-1 Q 5.309017,-0.30901699 5,1 Q 4.763932,2 5,3 Q 5.2150407,3.9109272 6,5 Q 6.4188612,5.5811388 7,6 Q 7.9188612,6.6622777 9,7","advance":14},{"key":"|","d":"M 4,-25 L 4,7","advance":8},{"key":"}","d":"M 5,-25 Q 6.0811388,-24.662278 7,-24 Q 7.5811388,-23.581139 8,-23 Q 8.7849593,-21.910927 9,-21 Q 9.236068,-20 9,-19 Q 8.690983,-17.690983 8,-17 L 7,-16 Q 6.309017,-15.309017 6,-14 Q 5.6992609,-12.726049 6,-12 Q 6.5857864,-10.585786 8,-10 M 7,-24 Q 7.736068,-23.118034 8,-22 Q 8.236068,-21 8,-20 Q 7.690983,-18.690983 7,-18 L 6,-17 Q 5.309017,-16.309017 5,-15 Q 4.763932,-14 5,-13 Q 5.309017,-11.690983 6,-11 Q 7.6666667,-9.3333333 10,-9 Q 7.6666667,-8.6666667 6,-7 Q 5.309017,-6.309017 5,-5 Q 4.763932,-4 5,-3 Q 5.309017,-1.690983 6,-1 L 7,0 Q 7.690983,0.69098301 8,2 Q 8.236068,3 8,4 Q 7.736068,5.118034 7,6 M 8,-8 Q 6.5857864,-7.4142136 6,-6 Q 5.6992609,-5.2739515 6,-4 Q 6.309017,-2.690983 7,-2 L 8,-1 Q 8.690983,-0.30901699 9,1 Q 9.236068,2 9,3 Q 8.7849593,3.9109272 8,5 Q 7.5811388,5.5811388 7,6 Q 6.0811388,6.6622777 5,7","advance":14},{"key":"~","d":"M 3,-6 Q 2.8377223,-7 3,-8 Q 3.3687146,-10.272122 4,-11 Q 4.575679,-11.663763 6,-12 Q 7,-12.236068 8,-12 Q 8.9728913,-11.770332 10,-11 L 14,-8 Q 15.027109,-7.2296685 16,-7 Q 17,-6.763932 18,-7 Q 19.309017,-7.309017 20,-8 Q 20.833333,-8.8333333 21,-10 M 3,-8 Q 3.1666667,-9.1666667 4,-10 Q 4.690983,-10.690983 6,-11 Q 7,-11.236068 8,-11 Q 8.9728913,-10.770332 10,-10 L 14,-7 Q 15.027109,-6.2296685 16,-6 Q 17,-5.763932 18,-6 Q 19.424321,-6.3362366 20,-7 Q 20.631285,-7.7278782 21,-10 Q 21.162278,-11 21,-12","advance":24},{"key":"▮","d":"M 0,-21 L 0,0 Q 0.5,0.5 1,0 L 1,-21 Q 1.5,-21.5 2,-21 L 2,0 Q 2.5,0.5 3,0 L 3,-21 Q 3.5,-21.5 4,-21 L 4,0 Q 4.5,0.5 5,0 L 5,-21 Q 5.5,-21.5 6,-21 L 6,0 Q 6.5,0.5 7,0 L 7,-21 Q 7.5,-21.5 8,-21 L 8,0 Q 8.5,0.5 9,0 L 9,-21 Q 9.5,-21.5 10,-21 L 10,0 Q 10.5,0.5 11,0 L 11,-21 Q 11.5,-21.5 12,-21 L 12,0 Q 12.5,0.5 13,0 L 13,-21 Q 13.5,-21.5 14,-21 L 14,0 Q 14.5,0.5 15,0 L 15,-21 Q 15.5,-21.5 16,-21 L 16,0","advance":16}]'),B0={top:W0,bottom:Z0,spaceWidth:H0,strokeWidth:j0,kerning:J0,mHeight:G0,letters:V0},Y0=-25,K0=12,t2=16,e2=1,n2=0,r2=21,s2=JSON.parse('[{"key":" ","d":"","advance":16},{"key":"!","d":"M 5,-21 L 5,-7 M 5,-2 Q 4,-2 4,-1 Q 4,0.00000000000000012246468 5,0 Q 6,0 6,-1 Q 6,-2 5,-2 Z","advance":10},{"key":"\\"","d":"M 4,-21 L 4,-14 M 12,-21 L 12,-14","advance":16},{"key":"#","d":"M 11,-25 L 4,7 M 17,-25 L 10,7 M 4,-12 L 18,-12 M 3,-6 L 17,-6","advance":21},{"key":"$","d":"M 8,-25 L 8,4 M 12,-25 L 12,4 M 17,-18 Q 16.236068,-19.236068 15,-20 Q 13.874032,-20.695886 12,-21 Q 10,-21.324555 8,-21 Q 6.125968,-20.695886 5,-20 Q 3.4253094,-19.026788 3,-18 Q 2.6992609,-17.273951 3,-16 Q 3.2150407,-15.089073 4,-14 Q 4.4188612,-13.418861 5,-13 Q 5.8603796,-12.379873 7,-12 L 13,-10 Q 14.13962,-9.6201265 15,-9 Q 15.581139,-8.5811388 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.451109,-4.0890728 17,-3 Q 16.574691,-1.9732123 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.763932,-1.763932 3,-3","advance":20},{"key":"%","d":"M 21,-21 L 3,0 M 8,-21 Q 9.4142136,-20.414214 10,-19 Q 10.300739,-18.273951 10,-17 Q 9.690983,-15.690983 9,-15 Q 8.309017,-14.309017 7,-14 Q 5.7260485,-13.699261 5,-14 Q 3.5857864,-14.585786 3,-16 Q 2.6992609,-16.726049 3,-18 Q 3.309017,-19.309017 4,-20 Q 4.690983,-20.690983 6,-21 Q 7.3585702,-21.320715 8,-21 L 10,-20 Q 11.519494,-19.240253 13,-19 Q 14.5,-18.756584 16,-19 Q 16.963105,-19.15629 19,-20 Q 20.035534,-20.428932 21,-21 M 17,-7 Q 15.833333,-6.8333333 15,-6 Q 14.309017,-5.309017 14,-4 Q 13.699261,-2.7260485 14,-2 Q 14.585786,-0.58578644 16,0 Q 16.726049,0.30073915 18,0 Q 19.309017,-0.30901699 20,-1 Q 20.690983,-1.690983 21,-3 Q 21.300739,-4.2739515 21,-5 Q 20.414214,-6.4142136 19,-7 Q 18,-7.4142136 17,-7 Z","advance":24},{"key":"&","d":"M 23,-12 Q 23.207107,-12.5 23,-13 Q 22.707107,-13.707107 22,-14 Q 21.5,-14.207107 21,-14 Q 20.60191,-13.835106 20,-13 Q 19.550592,-12.376479 19,-11 L 17,-6 Q 16.562261,-4.9056517 15,-3 Q 13.880899,-1.6349159 13,-1 Q 11.910927,-0.21504074 11,0 Q 9,0.47213595 7,0 Q 6.0890728,-0.21504074 5,-1 Q 4.4188612,-1.4188612 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.763932,-5 3,-6 Q 3.2150407,-6.9109272 4,-8 Q 4.5252118,-8.7286925 5,-9 L 12,-13 Q 12.474788,-13.271308 13,-14 Q 13.784959,-15.089073 14,-16 Q 14.236068,-17 14,-18 Q 13.690983,-19.309017 13,-20 Q 12,-21 11,-21 Q 10,-21 9,-20 Q 8.309017,-19.309017 8,-18 Q 7.8076617,-17.185242 8,-16 Q 8.2320166,-14.570249 9,-13 Q 9.1717605,-12.648812 11,-10 Q 15.090218,-4.0739613 16,-3 Q 17.214879,-1.5658828 18,-1 Q 19.089073,-0.21504074 20,0 Q 21.273951,0.30073915 22,0 Q 22.707107,-0.29289322 23,-1 Q 23.207107,-1.5 23,-2","advance":26},{"key":"’","d":"M 2,-14 L 2,-10","advance":4},{"key":"(","d":"M 11,-25 Q 9.9009805,-24.09902 9,-23 Q 8.1132681,-21.918361 7,-20 Q 5.4647144,-17.354427 5,-16 Q 4.2902733,-13.931476 4,-11 Q 3.801961,-9 4,-7 Q 4.2902733,-4.0685242 5,-2 Q 5.4647144,-0.64557287 7,2 Q 8.1132681,3.918361 9,5 Q 9.9009805,6.0990195 11,7","advance":14},{"key":")","d":"M 3,-25 Q 4.0990195,-24.09902 5,-23 Q 5.8867319,-21.918361 7,-20 Q 8.5352856,-17.354427 9,-16 Q 9.7097267,-13.931476 10,-11 Q 10.198039,-9 10,-7 Q 9.7097267,-4.0685242 9,-2 Q 8.5352856,-0.64557287 7,2 Q 5.8867319,3.918361 5,5 Q 4.0990195,6.0990195 3,7","advance":14},{"key":"*","d":"M 8,-15 L 8,-3 M 3,-12 L 13,-6 M 13,-12 L 3,-6","advance":16},{"key":"+","d":"M 13,-18 L 13,0 M 4,-9 L 22,-9","advance":26},{"key":",","d":"M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"-","d":"M 4,-9 L 22,-9","advance":26},{"key":".","d":"M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":"/","d":"M 20,-25 L 2,7","advance":22},{"key":"0","d":"M 9,-21 Q 7.3284461,-21.014662 6,-20 Q 4.8921428,-19.153823 4,-17 Q 3.3364804,-15.398122 3,-12 Q 2.8514707,-10.5 3,-9 Q 3.3364804,-5.6018781 4,-4 Q 4.8921428,-1.8461767 6,-1 Q 6.8531197,-0.34839071 9,0 Q 10,0.16227766 11,0 Q 13.14688,-0.34839071 14,-1 Q 15.107857,-1.8461767 16,-4 Q 16.66352,-5.6018781 17,-9 Q 17.148529,-10.5 17,-12 Q 16.66352,-15.398122 16,-17 Q 15.107857,-19.153823 14,-20 Q 13.14688,-20.651609 11,-21 Q 10,-21.162278 9,-21 Z","advance":20},{"key":"1","d":"M 6,-17 Q 7.0811388,-17.337722 8,-18 Q 9.7434165,-19.256584 11,-21 L 11,0","advance":20},{"key":"2","d":"M 4,-16 Q 3.881966,-16.5 4,-17 Q 4.2150407,-17.910927 5,-19 Q 5.4188612,-19.581139 6,-20 Q 7.0890728,-20.784959 8,-21 Q 10,-21.472136 12,-21 Q 12.910927,-20.784959 14,-20 Q 14.581139,-19.581139 15,-19 Q 15.784959,-17.910927 16,-17 Q 16.236068,-16 16,-15 Q 15.88984,-14.533354 15,-13 Q 13.617218,-10.617218 13,-10 L 3,0 L 17,0","advance":20},{"key":"3","d":"M 5,-21 L 16,-21 L 10,-13 Q 11.5,-13.354102 13,-13 Q 13.910927,-12.784959 15,-12 Q 15.68879,-11.503548 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"4","d":"M 13,-21 L 3,-7 L 18,-7 M 13,-21 L 13,0","advance":20},{"key":"5","d":"M 15,-21 L 5,-21 L 4,-12 Q 4.381966,-12.618034 5,-13 Q 6.125968,-13.695886 8,-14 Q 9.5,-14.243416 11,-14 Q 12.874032,-13.695886 14,-13 Q 15.236068,-12.236068 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"6","d":"M 16,-18 Q 15.914214,-19.207107 15,-20 Q 14.272122,-20.631285 12,-21 Q 11,-21.162278 10,-21 Q 7.8531197,-20.651609 7,-20 Q 5.8921428,-19.153823 5,-17 Q 4.3364804,-15.398122 4,-12 Q 3.7256083,-9.2289128 4,-7 Q 4.3513984,-4.145554 5,-3 Q 5.6653554,-1.8248557 7,-1 Q 8.125968,-0.30411354 10,0 Q 10.5,0.08113883 11,0 Q 12.874032,-0.30411354 14,-1 Q 15.236068,-1.763932 16,-3 Q 16.695886,-4.125968 17,-6 Q 17.081139,-6.5 17,-7 Q 16.695886,-8.874032 16,-10 Q 15.236068,-11.236068 14,-12 Q 12.874032,-12.695886 11,-13 Q 10.5,-13.081139 10,-13 Q 8.125968,-12.695886 7,-12 Q 5.763932,-11.236068 5,-10 Q 4.145898,-8.618034 4,-7","advance":20},{"key":"7","d":"M 17,-21 L 7,0 M 3,-21 L 17,-21","advance":20},{"key":"8","d":"M 8,-21 Q 6.2928932,-21.12132 5,-20 Q 4.3362366,-19.424321 4,-18 Q 3.763932,-17 4,-16 Q 4.309017,-14.690983 5,-14 Q 5.6666667,-13.333333 7,-13 L 11,-12 Q 13.320715,-11.419821 14,-11 Q 15.007096,-10.37758 16,-9 Q 16.784959,-7.9109272 17,-7 Q 17.354102,-5.5 17,-4 Q 16.784959,-3.0890728 16,-2 Q 15.503548,-1.3112099 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.645898,-5.5 3,-7 Q 3.2150407,-7.9109272 4,-9 Q 4.9929036,-10.37758 6,-11 Q 6.6792851,-11.419821 9,-12 L 13,-13 Q 14.333333,-13.333333 15,-14 Q 15.690983,-14.690983 16,-16 Q 16.236068,-17 16,-18 Q 15.663763,-19.424321 15,-20 Q 14.272122,-20.631285 12,-21 Q 10,-21.324555 8,-21 Z","advance":20},{"key":"9","d":"M 16,-14 Q 15.854102,-12.381966 15,-11 Q 14.236068,-9.763932 13,-9 Q 11.874032,-8.3041135 10,-8 Q 9.5,-7.9188612 9,-8 Q 7.125968,-8.3041135 6,-9 Q 4.763932,-9.763932 4,-11 Q 3.3041135,-12.125968 3,-14 Q 2.9188612,-14.5 3,-15 Q 3.3041135,-16.874032 4,-18 Q 4.763932,-19.236068 6,-20 Q 7.125968,-20.695886 9,-21 Q 9.5,-21.081139 10,-21 Q 11.874032,-20.695886 13,-20 Q 14.334645,-19.175144 15,-18 Q 15.648602,-16.854446 16,-14 Q 16.274392,-11.771087 16,-9 Q 15.66352,-5.6018781 15,-4 Q 14.107857,-1.8461767 13,-1 Q 12.14688,-0.34839071 10,0 Q 9,0.16227766 8,0 Q 5.7278782,-0.36871462 5,-1 Q 4.0857864,-1.7928932 4,-3","advance":20},{"key":":","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":";","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"<","d":"M 20,-18 L 4,-9 L 20,0","advance":24},{"key":"=","d":"M 4,-12 L 22,-12 M 4,-6 L 22,-6","advance":26},{"key":">","d":"M 4,-18 L 20,-9 L 4,0","advance":24},{"key":"?","d":"M 3,-16 Q 2.881966,-16.5 3,-17 Q 3.2150407,-17.910927 4,-19 Q 4.4188612,-19.581139 5,-20 Q 6.0890728,-20.784959 7,-21 Q 9,-21.472136 11,-21 Q 11.910927,-20.784959 13,-20 Q 13.581139,-19.581139 14,-19 Q 14.784959,-17.910927 15,-17 Q 15.236068,-16 15,-15 Q 14.784959,-14.089073 14,-13 Q 13.581139,-12.418861 13,-12 Q 11.162278,-10.675445 9,-10 L 9,-7 M 9,-2 Q 8,-2 8,-1 Q 8,0.00000000000000012246468 9,0 Q 10,0 10,-1 Q 10,-2 9,-2 Z","advance":18},{"key":"@","d":"M 18,-13 Q 17.833333,-14.166667 17,-15 Q 16.309017,-15.690983 15,-16 Q 13.5,-16.354102 12,-16 Q 11.089073,-15.784959 10,-15 Q 9.3112099,-14.503548 9,-14 Q 8.3041135,-12.874032 8,-11 Q 7.7114926,-9.2221371 8,-8 Q 8.309017,-6.690983 9,-6 Q 9.690983,-5.309017 11,-5 Q 12.5,-4.645898 14,-5 Q 15.309017,-5.309017 16,-6 Q 16.833333,-6.8333333 17,-8 M 12,-16 Q 10.763932,-15.236068 10,-14 Q 9.3041135,-12.874032 9,-11 Q 8.7114926,-9.2221371 9,-8 Q 9.2150407,-7.0890728 10,-6 Q 10.418861,-5.4188612 11,-5 M 18,-16 L 17,-8 Q 16.792057,-6.3364584 17,-6 Q 17.381966,-5.381966 19,-5 Q 20.273951,-4.6992609 21,-5 Q 22.026788,-5.4253094 23,-7 Q 23.695886,-8.125968 24,-10 Q 24.162278,-11 24,-12 Q 23.84371,-12.963105 23,-15 Q 22.403407,-16.440302 22,-17 Q 21.162278,-18.162278 20,-19 Q 19.440302,-19.403407 18,-20 Q 15.963105,-20.84371 15,-21 Q 13.5,-21.243416 12,-21 Q 11.036895,-20.84371 9,-20 Q 7.5596976,-19.403407 7,-19 Q 5.8377223,-18.162278 5,-17 Q 4.5965928,-16.440302 4,-15 Q 3.1562904,-12.963105 3,-12 Q 2.7565835,-10.5 3,-9 Q 3.1562904,-8.0368952 4,-6 Q 4.5965928,-4.5596976 5,-4 Q 5.8377223,-2.8377223 7,-2 Q 7.5596976,-1.5965928 9,-1 Q 11.036895,-0.1562904 12,0 Q 13.5,0.24341649 15,0 Q 15.963105,-0.1562904 18,-1 Q 19.440302,-1.5965928 20,-2 Q 20.581139,-2.4188612 21,-3 M 19,-16 L 18,-8 Q 17.807955,-6.4636382 18,-6 Q 18.292893,-5.2928932 19,-5","advance":27},{"key":"A","d":"M 0,0 Q 1.0811388,-0.33772234 2,-1 Q 3.0619516,-1.7654114 5,-4 Q 6.5336244,-5.7682838 8,-8 Q 10.09173,-11.183459 12,-15 L 15,-21 L 15,0 Q 14.700877,-1.566959 14,-3 Q 13.320601,-4.3891255 12,-6 Q 11.09902,-7.0990195 10,-8 Q 7.8885621,-9.7309651 7,-10 Q 5.8445752,-10.349834 5,-10 Q 4.2928932,-9.7071068 4,-9 Q 3.6992609,-8.2739515 4,-7 Q 4.2150407,-6.0890728 5,-5 Q 5.6349159,-4.1191013 7,-3 Q 8.6108745,-1.6793988 10,-1 Q 12.044639,0.0000000000000002220446 13,0 L 18,0","advance":20},{"key":"B","d":"M 13,-19 Q 13.707107,-18.707107 14,-18 Q 14.284702,-17.312668 14,-15 Q 13.879306,-14.019586 13,-11 Q 12.425612,-9.027518 12,-8 Q 11.599411,-7.0328935 11,-6 Q 9.8867319,-4.081639 9,-3 Q 7.8808987,-1.6349159 7,-1 Q 5.9109272,-0.21504074 5,0 Q 4.3630243,0.15036957 4,0 Q 3.2928932,-0.29289322 3,-1 Q 2.7602538,-1.5787985 3,-4 Q 3.1949071,-5.9683709 4,-9 Q 4.4334821,-10.632305 5,-12 Q 5.4005886,-12.967107 6,-14 Q 7.1132681,-15.918361 8,-17 Q 9.1191013,-18.365084 10,-19 Q 10.559698,-19.403407 12,-20 Q 14.036895,-20.84371 15,-21 Q 16.777863,-21.288507 18,-21 Q 19.309017,-20.690983 20,-20 Q 20.690983,-19.309017 21,-18 Q 21.236068,-17 21,-16 Q 20.784959,-15.089073 20,-14 Q 19.581139,-13.418861 19,-13 Q 18.440302,-12.596593 17,-12 Q 15.535534,-11.393398 14,-11 M 13,-11 Q 13.5,-11.081139 14,-11 Q 15.874032,-10.695886 17,-10 Q 17.503548,-9.6887901 18,-9 Q 18.784959,-7.9109272 19,-7 Q 19.354102,-5.5 19,-4 Q 18.784959,-3.0890728 18,-2 Q 17.581139,-1.4188612 17,-1 Q 15.910927,-0.21504074 15,0 Q 13.5,0.35410197 12,0 Q 10.690983,-0.30901699 10,-1 Q 9.1666667,-1.8333333 9,-3","advance":23},{"key":"C","d":"M 12,-15 Q 11.792893,-14.5 12,-14 Q 12.292893,-13.292893 13,-13 Q 13.726049,-12.699261 15,-13 Q 16.309017,-13.309017 17,-14 Q 17.690983,-14.690983 18,-16 Q 18.236068,-17 18,-18 Q 17.690983,-19.309017 17,-20 Q 16.309017,-20.690983 15,-21 Q 13.777863,-21.288507 12,-21 Q 10.125968,-20.695886 9,-20 Q 8.2694753,-19.548511 7,-18 Q 6.1132681,-16.918361 5,-15 Q 4.2824473,-13.763528 4,-13 Q 3.2392581,-10.943519 3,-9 Q 2.7199935,-6.7254777 3,-5 Q 3.3041135,-3.125968 4,-2 Q 4.3112099,-1.4964518 5,-1 Q 6.0890728,-0.21504074 7,0 Q 7.8147581,0.19233829 9,0 Q 10.874032,-0.30411354 12,-1 Q 13.007096,-1.6224198 14,-3 Q 14.662278,-3.9188612 15,-5","advance":20},{"key":"D","d":"M 13,-21 Q 11.833333,-20.833333 11,-20 Q 10.58711,-19.58711 10,-18 Q 9.3933406,-16.360043 9,-14 L 8,-8 Q 7.8366366,-7.0198193 7,-5 Q 6.4034072,-3.5596976 6,-3 Q 5.1622777,-1.8377223 4,-1 Q 2.9109272,-0.21504074 2,0 Q 0.72604853,0.30073915 0,0 Q -0.70710678,-0.29289322 -1,-1 Q -1.4142136,-2 -1,-3 Q -0.70710678,-3.7071068 0,-4 Q 0.72604853,-4.3007391 2,-4 Q 3.309017,-3.690983 4,-3 L 6,-1 Q 6.6125741,-0.38742589 9,0 Q 10.5,0.24341649 12,0 Q 13.874032,-0.30411354 15,-1 Q 16.007096,-1.6224198 17,-3 Q 18.197734,-4.6617677 19,-7 Q 19.709727,-9.0685242 20,-12 Q 20.245983,-14.484185 20,-16 Q 19.695886,-17.874032 19,-19 Q 18.68879,-19.503548 18,-20 Q 16.910927,-20.784959 16,-21 Q 14.089073,-21.451109 13,-21 Q 11.585786,-20.414214 11,-19 Q 10.766804,-18.437016 11,-17 Q 11.232017,-15.570249 12,-14 Q 12.679399,-12.610875 14,-11 Q 14.90098,-9.9009805 16,-9 Q 17.081639,-8.1132681 19,-7 Q 19.968871,-6.4377423 21,-6","advance":23},{"key":"E","d":"M 14,-17 Q 13.792893,-16.5 14,-16 Q 14.292893,-15.292893 15,-15 Q 16,-14.585786 17,-15 Q 17.707107,-15.292893 18,-16 Q 18.300739,-16.726049 18,-18 Q 17.663763,-19.424321 17,-20 Q 16.272122,-20.631285 14,-21 Q 12,-21.324555 10,-21 Q 7.7278782,-20.631285 7,-20 Q 6.3362366,-19.424321 6,-18 Q 5.645898,-16.5 6,-15 Q 6.2150407,-14.089073 7,-13 Q 7.4964518,-12.31121 8,-12 Q 9.381966,-11.145898 11,-11 Q 9.5,-11.243416 8,-11 Q 6.125968,-10.695886 5,-10 Q 4.4964518,-9.6887901 4,-9 Q 3.2150407,-7.9109272 3,-7 Q 2.645898,-5.5 3,-4 Q 3.2150407,-3.0890728 4,-2 Q 4.4964518,-1.3112099 5,-1 Q 6.125968,-0.30411354 8,0 Q 9.5,0.24341649 11,0 Q 12.874032,-0.30411354 14,-1 Q 15.007096,-1.6224198 16,-3 Q 16.662278,-3.9188612 17,-5","advance":20},{"key":"F","d":"M 10,-15 Q 9,-14.763932 8,-15 Q 6.690983,-15.309017 6,-16 Q 5,-17 5,-18 Q 5,-19.132705 6,-20 Q 6.7278782,-20.631285 9,-21 Q 10.819162,-21.295209 12,-21 L 16,-20 Q 17.457006,-19.635749 19,-20 Q 20.118034,-20.263932 21,-21 M 16,-20 L 14,-13 Q 12.920991,-9.22347 12,-7 Q 10.806814,-4.1193952 10,-3 Q 9.1622777,-1.8377223 8,-1 Q 6.9109272,-0.21504074 6,0 Q 5,0.23606798 4,0 Q 2.690983,-0.30901699 2,-1 Q 1.309017,-1.690983 1,-3 Q 0.69926085,-4.2739515 1,-5 Q 1.2928932,-5.7071068 2,-6 Q 2.7260485,-6.3007391 4,-6 Q 5.118034,-5.736068 6,-5 M 9,-11 L 18,-11","advance":20},{"key":"G","d":"M 0,0 Q 1.0811388,-0.33772234 2,-1 Q 4.0054842,-2.4454712 6,-5 Q 7.7042607,-7.1827769 9,-10 Q 9.3445349,-10.749095 10,-13 Q 10.879306,-16.019586 11,-17 Q 11.284702,-19.312668 11,-20 Q 10.707107,-20.707107 10,-21 Q 9.5,-21.207107 9,-21 Q 8.6019102,-20.835106 8,-20 Q 7.2150407,-18.910927 7,-18 Q 6.645898,-16.5 7,-15 Q 7.309017,-13.690983 8,-13 Q 8.690983,-12.309017 10,-12 Q 11.629516,-11.615323 14,-12 Q 15.874032,-12.304114 17,-13 Q 17.503548,-13.31121 18,-14 Q 18.662278,-14.918861 19,-16 L 19,-10 Q 19,-7.9145363 18,-5 Q 17.598867,-3.8308838 17,-3 Q 16.007096,-1.6224198 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.9929036,-1.6224198 3,-3 Q 2.2150407,-4.0890728 2,-5 Q 1.763932,-6 2,-7","advance":23},{"key":"H","d":"M 7,-14 Q 5.8333333,-14.166667 5,-15 Q 4.309017,-15.690983 4,-17 Q 3.881966,-17.5 4,-18 Q 4.309017,-19.309017 5,-20 Q 5.690983,-20.690983 7,-21 Q 7.5,-21.118034 8,-21 Q 9.309017,-20.690983 10,-20 Q 10.690983,-19.309017 11,-18 Q 11.161823,-17.314506 11,-16 Q 10.879306,-15.019586 10,-12 Q 8.8512237,-8.0550359 8,-6 Q 6.8068144,-3.1193952 6,-2 Q 4.7961796,-0.32978838 4,0 Q 3,0.41421356 2,0 Q 1.2928932,-0.29289322 1,-1 Q 0.58578644,-2 1,-3 M 7,-9 L 16,-12 Q 16.650413,-12.216804 18,-13 Q 19.918361,-14.113268 21,-15 Q 22.365084,-16.119101 23,-17 Q 23.784959,-18.089073 24,-19 Q 24.15037,-19.636976 24,-20 Q 23.707107,-20.707107 23,-21 Q 22.5,-21.207107 22,-21 Q 21.20382,-20.670212 20,-19 Q 19.193186,-17.880605 18,-15 Q 16.866964,-12.26461 16,-9 Q 15.194907,-5.9683709 15,-4 Q 14.760254,-1.5787985 15,-1 Q 15.292893,-0.29289322 16,0 Q 16.363024,0.15036957 17,0 Q 17.910927,-0.21504074 19,-1 Q 19.440449,-1.3174579 20,-2 Q 21.148529,-3.4009805 22,-5","advance":24},{"key":"I","d":"M 14,-5 Q 12.90098,-5.9009805 12,-7 Q 11.113268,-8.081639 10,-10 Q 9.4005886,-11.032893 9,-12 Q 8.1562904,-14.036895 8,-15 Q 7.7114926,-16.777863 8,-18 Q 8.2150407,-18.910927 9,-20 Q 9.6019102,-20.835106 10,-21 Q 11,-21.414214 12,-21 Q 12.39809,-20.835106 13,-20 Q 13.784959,-18.910927 14,-18 Q 14.209277,-17.11349 14,-15 Q 13.757083,-12.546781 13,-10 Q 12.519554,-8.3838089 11,-5 Q 10.270239,-3.3749372 10,-3 Q 9.1622777,-1.8377223 8,-1 Q 6.9109272,-0.21504074 6,0 Q 5,0.23606798 4,0 Q 2.690983,-0.30901699 2,-1 Q 1.309017,-1.690983 1,-3 Q 0.69926085,-4.2739515 1,-5 Q 1.2928932,-5.7071068 2,-6 Q 2.7260485,-6.3007391 4,-6 Q 5.118034,-5.736068 6,-5","advance":17},{"key":"J","d":"M 10,3 Q 8.8438171,1.604122 8,0 Q 6.7160888,-2.4407544 6,-5 Q 5.2851244,-7.5549099 5,-11 Q 4.6711435,-14.973495 5,-17 Q 5.3687146,-19.272122 6,-20 Q 6.575679,-20.663763 8,-21 Q 9.2739515,-21.300739 10,-21 Q 10.513394,-20.787345 11,-20 Q 11.695886,-18.874032 12,-17 Q 12.184487,-15.863139 12,-14 Q 11.805093,-12.031629 11,-9 Q 9.5,-4.5 8,0 Q 7,3 6,6 Q 5.5,7.5 5,9 Q 4.2928932,10.707107 4,11 Q 2.8603796,12.13962 2,12 Q 1.372001,11.89809 1,11 Q 0.7668044,10.437016 1,9 Q 1.2320166,7.570249 2,6 Q 2.6793988,4.6108745 4,3 Q 4.9009805,1.9009805 6,1 Q 7.081639,0.1132681 9,-1 Q 10.937742,-2.1245155 13,-3","advance":15},{"key":"K","d":"M 7,-14 Q 5.8333333,-14.166667 5,-15 Q 4.309017,-15.690983 4,-17 Q 3.881966,-17.5 4,-18 Q 4.309017,-19.309017 5,-20 Q 5.690983,-20.690983 7,-21 Q 7.5,-21.118034 8,-21 Q 9.309017,-20.690983 10,-20 Q 10.690983,-19.309017 11,-18 Q 11.161823,-17.314506 11,-16 Q 10.879306,-15.019586 10,-12 Q 8.8512237,-8.0550359 8,-6 Q 6.8068144,-3.1193952 6,-2 Q 4.7961796,-0.32978838 4,0 Q 3,0.41421356 2,0 Q 1.2928932,-0.29289322 1,-1 Q 0.58578644,-2 1,-3 M 24,-18 Q 24.414214,-19 24,-20 Q 23.707107,-20.707107 23,-21 Q 22.636976,-21.15037 22,-21 Q 21.089073,-20.784959 20,-20 Q 18.7167,-19.075049 18,-18 L 16,-15 Q 15.2833,-13.924951 14,-13 Q 12.910927,-12.215041 12,-12 Q 11,-11.763932 10,-12 M 12,-12 Q 13,-10.801787 13,-10 L 13,-3 Q 13,-2.3874259 14,-1 Q 14.60191,-0.16489419 15,0 Q 15.363024,0.15036957 16,0 Q 16.910927,-0.21504074 18,-1 Q 18.440449,-1.3174579 19,-2 Q 20.148529,-3.4009805 21,-5","advance":24},{"key":"L","d":"M 4,-9 Q 5,-8.8768944 6,-9 Q 8.410165,-9.2967049 10,-10 Q 11.217197,-10.538451 13,-12 Q 14.365084,-13.119101 15,-14 Q 15.784959,-15.089073 16,-16 Q 16.354102,-17.5 16,-19 Q 15.618034,-20.618034 15,-21 Q 14.197453,-21.496001 13,-21 Q 12.60191,-20.835106 12,-20 Q 11.401133,-19.169116 11,-18 Q 11,-18 10,-13 Q 9.5,-10.5 9,-8 Q 8.5665179,-6.3676952 8,-5 Q 7.4034072,-3.5596976 7,-3 Q 6.1622777,-1.8377223 5,-1 Q 3.9109272,-0.21504074 3,0 Q 1.7260485,0.30073915 1,0 Q 0.29289322,-0.29289322 0,-1 Q -0.41421356,-2 0,-3 Q 0.29289322,-3.7071068 1,-4 Q 1.7260485,-4.3007391 3,-4 Q 3.774116,-3.817256 5,-3 L 8,-1 Q 9.0174033,-0.32173116 11,0 Q 12,0.16227766 13,0 Q 14.874032,-0.30411354 16,-1 Q 17.236068,-1.763932 18,-3","advance":19},{"key":"M","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1395178,-17.408993 9,-16 Q 8.902173,-15.012043 8,-11 Q 7.4720662,-8.6522317 7,-7 L 5,0 M 7,-7 L 10,-15 Q 10.957715,-17.553907 12,-19 Q 12.418861,-19.581139 13,-20 Q 14.089073,-20.784959 15,-21 Q 15.5,-21.118034 16,-21 Q 17.309017,-20.690983 18,-20 Q 18.690983,-19.309017 19,-18 Q 19.139518,-17.408993 19,-16 Q 18.902173,-15.012043 18,-11 Q 17.472066,-8.6522317 17,-7 L 15,0 M 17,-7 L 20,-15 Q 20.957715,-17.553907 22,-19 Q 22.418861,-19.581139 23,-20 Q 24.089073,-20.784959 25,-21 Q 25.5,-21.118034 26,-21 Q 27.309017,-20.690983 28,-20 Q 28.690983,-19.309017 29,-18 Q 29.139518,-17.408993 29,-16 Q 28.772694,-13.704427 28,-11 L 26,-4 Q 25.492747,-2.224616 26,-1 Q 26.292893,-0.29289322 27,0 Q 27.363024,0.15036957 28,0 Q 28.910927,-0.21504074 30,-1 Q 30.440449,-1.3174579 31,-2 Q 32.148529,-3.4009805 33,-5","advance":33},{"key":"N","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1395178,-17.408993 9,-16 Q 8.902173,-15.012043 8,-11 Q 7.4720662,-8.6522317 7,-7 L 5,0 M 7,-7 L 10,-15 Q 10.957715,-17.553907 12,-19 Q 12.418861,-19.581139 13,-20 Q 14.089073,-20.784959 15,-21 Q 16,-21.236068 17,-21 Q 18.309017,-20.690983 19,-20 Q 19.690983,-19.309017 20,-18 Q 20.139518,-17.408993 20,-16 Q 19.772694,-13.704427 19,-11 L 17,-4 Q 16.492747,-2.224616 17,-1 Q 17.292893,-0.29289322 18,0 Q 18.363024,0.15036957 19,0 Q 19.910927,-0.21504074 21,-1 Q 21.440449,-1.3174579 22,-2 Q 23.148529,-3.4009805 24,-5","advance":24},{"key":"O","d":"M 12,-21 Q 10.381966,-20.854102 9,-20 Q 8.2694753,-19.548511 7,-18 Q 6.1132681,-16.918361 5,-15 Q 4.2824473,-13.763528 4,-13 Q 3.2392581,-10.943519 3,-9 Q 2.7199935,-6.7254777 3,-5 Q 3.3041135,-3.125968 4,-2 Q 4.3112099,-1.4964518 5,-1 Q 6.0890728,-0.21504074 7,0 Q 7.8147581,0.19233829 9,0 Q 10.874032,-0.30411354 12,-1 Q 12.730525,-1.4514891 14,-3 Q 14.886732,-4.081639 16,-6 Q 16.717553,-7.2364722 17,-8 Q 17.760742,-10.056481 18,-12 Q 18.280006,-14.274522 18,-16 Q 17.695886,-17.874032 17,-19 Q 16.68879,-19.503548 16,-20 Q 14.910927,-20.784959 14,-21 Q 12.726049,-21.300739 12,-21 Q 10.585786,-20.414214 10,-19 Q 9.6502066,-18.155524 10,-16 Q 10.232017,-14.570249 11,-13 Q 11.679399,-11.610875 13,-10 Q 13.90098,-8.9009805 15,-8 Q 16.081639,-7.1132681 18,-6 Q 18.968871,-5.4377423 20,-5","advance":21},{"key":"P","d":"M 13,-19 Q 13.707107,-18.707107 14,-18 Q 14.284702,-17.312668 14,-15 Q 13.879306,-14.019586 13,-11 Q 12.425612,-9.027518 12,-8 Q 11.599411,-7.0328935 11,-6 Q 9.8867319,-4.081639 9,-3 Q 7.8808987,-1.6349159 7,-1 Q 5.9109272,-0.21504074 5,0 Q 4.3630243,0.15036957 4,0 Q 3.2928932,-0.29289322 3,-1 Q 2.7602538,-1.5787985 3,-4 Q 3.1949071,-5.9683709 4,-9 Q 4.4334821,-10.632305 5,-12 Q 5.4005886,-12.967107 6,-14 Q 7.1132681,-15.918361 8,-17 Q 9.1191013,-18.365084 10,-19 Q 10.559698,-19.403407 12,-20 Q 14.036895,-20.84371 15,-21 Q 17.963105,-21.480846 20,-21 Q 20.910927,-20.784959 22,-20 Q 22.581139,-19.581139 23,-19 Q 23.784959,-17.910927 24,-17 Q 24.354102,-15.5 24,-14 Q 23.784959,-13.089073 23,-12 Q 22.581139,-11.418861 22,-11 Q 20.910927,-10.215041 20,-10 Q 18.5,-9.645898 17,-10 Q 16.089073,-10.215041 15,-11 Q 14.418861,-11.418861 14,-12","advance":25},{"key":"Q","d":"M 13,-15 Q 12.662278,-13.918861 12,-13 Q 11.581139,-12.418861 11,-12 Q 9.9109272,-11.215041 9,-11 Q 7.5527864,-10.658359 7,-11 Q 6.381966,-11.381966 6,-13 Q 5.8076617,-13.814758 6,-15 Q 6.3041135,-16.874032 7,-18 Q 7.763932,-19.236068 9,-20 Q 10.125968,-20.695886 12,-21 Q 13.777863,-21.288507 15,-21 Q 16.309017,-20.690983 17,-20 Q 17.690983,-19.309017 18,-18 Q 18.384677,-16.370484 18,-14 Q 17.767983,-12.570249 17,-11 Q 16.320601,-9.6108745 15,-8 Q 13.198039,-5.801961 11,-4 Q 9.918361,-3.1132681 8,-2 Q 6.9671065,-1.4005886 6,-1 Q 3.9631048,-0.1562904 3,0 Q 1.562984,0.2331956 1,0 Q 0.29289322,-0.29289322 0,-1 Q -0.41421356,-2 0,-3 Q 0.29289322,-3.7071068 1,-4 Q 1.7260485,-4.3007391 3,-4 Q 3.774116,-3.817256 5,-3 L 8,-1 Q 9.0174033,-0.32173116 11,0 Q 12.5,0.24341649 14,0 Q 15.874032,-0.30411354 17,-1 Q 18.236068,-1.763932 19,-3","advance":22},{"key":"R","d":"M 13,-19 Q 13.707107,-18.707107 14,-18 Q 14.284702,-17.312668 14,-15 Q 13.879306,-14.019586 13,-11 Q 12.425612,-9.027518 12,-8 Q 11.599411,-7.0328935 11,-6 Q 9.8867319,-4.081639 9,-3 Q 7.8808987,-1.6349159 7,-1 Q 5.9109272,-0.21504074 5,0 Q 4.3630243,0.15036957 4,0 Q 3.2928932,-0.29289322 3,-1 Q 2.7602538,-1.5787985 3,-4 Q 3.1949071,-5.9683709 4,-9 Q 4.4334821,-10.632305 5,-12 Q 5.4005886,-12.967107 6,-14 Q 7.1132681,-15.918361 8,-17 Q 9.1191013,-18.365084 10,-19 Q 10.559698,-19.403407 12,-20 Q 14.036895,-20.84371 15,-21 Q 17.370484,-21.384677 19,-21 Q 19.910927,-20.784959 21,-20 Q 21.581139,-19.581139 22,-19 Q 22.784959,-17.910927 23,-17 Q 23.354102,-15.5 23,-14 Q 22.784959,-13.089073 22,-12 Q 21.581139,-11.418861 21,-11 Q 19.910927,-10.215041 19,-10 Q 17.777863,-9.7114926 16,-10 Q 14.418861,-10.256584 13,-11 Q 13.581139,-10.581139 14,-10 Q 15,-8.6125741 15,-8 L 15,-3 Q 15,-2 16,-1 Q 17,-0.0000000000000001110223 18,0 Q 18.612574,0.000000000000000034004694 20,-1 Q 20.440449,-1.3174579 21,-2 Q 22.148529,-3.4009805 23,-5","advance":25},{"key":"S","d":"M 0,0 Q 1.0811388,-0.33772234 2,-1 Q 2.7079677,-1.5102743 4,-3 Q 4.9224409,-4.0635833 7,-7 Q 8.440881,-9.0365375 9,-10 Q 10.198823,-12.065787 11,-14 Q 11.84371,-16.036895 12,-17 Q 12.349793,-19.155524 12,-20 Q 11.707107,-20.707107 11,-21 Q 10.5,-21.207107 10,-21 Q 9.6019102,-20.835106 9,-20 Q 8.2150407,-18.910927 8,-18 Q 7.763932,-17 8,-16 Q 8.2150407,-15.089073 9,-14 Q 9.9249506,-12.7167 11,-12 L 14,-10 Q 15.075049,-9.2833004 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.236068,-5 17,-4 Q 16.784959,-3.0890728 16,-2 Q 15.503548,-1.3112099 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.9929036,-1.6224198 3,-3 Q 2.2150407,-4.0890728 2,-5 Q 1.763932,-6 2,-7","advance":20},{"key":"T","d":"M 10,-15 Q 9,-14.763932 8,-15 Q 6.690983,-15.309017 6,-16 Q 5,-17 5,-18 Q 5,-19.132705 6,-20 Q 6.7278782,-20.631285 9,-21 Q 10.819162,-21.295209 12,-21 L 16,-20 Q 17.457006,-19.635749 19,-20 Q 20.118034,-20.263932 21,-21 M 16,-20 L 14,-13 Q 12.920991,-9.22347 12,-7 Q 10.806814,-4.1193952 10,-3 Q 9.1622777,-1.8377223 8,-1 Q 6.9109272,-0.21504074 6,0 Q 5,0.23606798 4,0 Q 2.690983,-0.30901699 2,-1 Q 1.309017,-1.690983 1,-3 Q 0.69926085,-4.2739515 1,-5 Q 1.2928932,-5.7071068 2,-6 Q 2.7260485,-6.3007391 4,-6 Q 5.118034,-5.736068 6,-5","advance":19},{"key":"U","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1618231,-17.314506 9,-16 Q 8.8048059,-14.414418 8,-12 L 7,-9 Q 6.1951941,-6.5855823 6,-5 Q 5.8381769,-3.6854937 6,-3 Q 6.309017,-1.690983 7,-1 Q 7.690983,-0.30901699 9,0 Q 10,0.23606798 11,0 Q 11.910927,-0.21504074 13,-1 Q 13.581139,-1.4188612 14,-2 Q 14.647421,-2.898248 16,-6 Q 18.071616,-10.750654 19,-14 L 21,-21 M 19,-14 Q 18.420128,-12.019968 18,-10 Q 17.163856,-5.9798285 17,-4 Q 16.79306,-1.4995966 17,-1 Q 17.292893,-0.29289322 18,0 Q 18.363024,0.15036957 19,0 Q 19.910927,-0.21504074 21,-1 Q 21.440449,-1.3174579 22,-2 Q 23.148529,-3.4009805 24,-5","advance":24},{"key":"V","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1618231,-17.314506 9,-16 Q 8.8048059,-14.414418 8,-12 L 7,-9 Q 6.1951941,-6.5855823 6,-5 Q 5.7572653,-3.0282406 6,-2 Q 6.381966,-0.38196601 7,0 Q 7.5527864,0.34164079 9,0 Q 9.9109272,-0.21504074 11,-1 Q 12.321348,-1.9523738 14,-4 Q 14.886732,-5.081639 16,-7 Q 17.198823,-9.065787 18,-11 Q 18.425612,-12.027518 19,-14 Q 19.879306,-17.019586 20,-18 Q 20.189802,-19.541778 20,-20 Q 19.707107,-20.707107 19,-21 Q 18.5,-21.207107 18,-21 Q 17.60191,-20.835106 17,-20 Q 16.215041,-18.910927 16,-18 Q 15.807662,-17.185242 16,-16 Q 16.304114,-14.125968 17,-13 Q 17.62242,-11.992904 19,-11 Q 19.918861,-10.337722 21,-10","advance":23},{"key":"W","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.155957,-17.339355 9,-15 L 8,0 M 18,-21 L 8,0 M 18,-21 L 16,0 M 30,-21 Q 28.918861,-20.662278 28,-20 Q 26.938048,-19.234589 25,-17 Q 23.163318,-14.882287 22,-13 Q 20.601984,-10.737962 19,-7 L 16,0","advance":28},{"key":"X","d":"M 8,-15 Q 7,-14.585786 6,-15 Q 5.2928932,-15.292893 5,-16 Q 4.6992609,-16.726049 5,-18 Q 5.309017,-19.309017 6,-20 Q 6.690983,-20.690983 8,-21 Q 9,-21.236068 10,-21 Q 11.309017,-20.690983 12,-20 Q 12.690983,-19.309017 13,-18 Q 13.343404,-16.545318 13,-15 L 11,-6 Q 10.656596,-4.4546824 11,-3 Q 11.309017,-1.690983 12,-1 Q 12.690983,-0.30901699 14,0 Q 15,0.23606798 16,0 Q 17.309017,-0.30901699 18,-1 Q 18.690983,-1.690983 19,-3 Q 19.300739,-4.2739515 19,-5 Q 18.707107,-5.7071068 18,-6 Q 17,-6.4142136 16,-6 M 23,-18 Q 23.414214,-19 23,-20 Q 22.707107,-20.707107 22,-21 Q 21.273951,-21.300739 20,-21 Q 19.089073,-20.784959 18,-20 Q 17.119101,-19.365084 16,-18 Q 14.543967,-16.223925 14,-15 L 10,-6 Q 9.4560335,-4.7760753 8,-3 Q 6.8808987,-1.6349159 6,-1 Q 4.9109272,-0.21504074 4,0 Q 2.7260485,0.30073915 2,0 Q 1.2928932,-0.29289322 1,-1 Q 0.58578644,-2 1,-3","advance":24},{"key":"Y","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1618231,-17.314506 9,-16 Q 8.8048059,-14.414418 8,-12 L 7,-9 Q 6.1951941,-6.5855823 6,-5 Q 5.8381769,-3.6854937 6,-3 Q 6.2150407,-2.0890728 7,-1 Q 7.6019102,-0.16489419 8,0 Q 8.7260485,0.30073915 10,0 Q 10.910927,-0.21504074 12,-1 Q 12.880899,-1.6349159 14,-3 Q 14.886732,-4.081639 16,-6 Q 16.783196,-7.3495867 17,-8 L 19,-14 M 21,-21 L 19,-14 Q 17.464952,-8.6273337 16,-4 Q 14.740258,-0.020863203 14,2 Q 12.914109,4.9644227 12,7 Q 10.369801,10.630199 10,11 Q 8.8603796,12.13962 8,12 Q 7.372001,11.89809 7,11 Q 6.7668044,10.437016 7,9 Q 7.2320166,7.570249 8,6 Q 8.6793988,4.6108745 10,3 Q 11.351471,1.3514707 13,0 Q 13.909902,-0.74594117 16,-2 L 21,-5","advance":23},{"key":"Z","d":"M 13,-15 Q 12.662278,-13.918861 12,-13 Q 11.581139,-12.418861 11,-12 Q 9.9109272,-11.215041 9,-11 Q 7.5527864,-10.658359 7,-11 Q 6.381966,-11.381966 6,-13 Q 5.8076617,-13.814758 6,-15 Q 6.3041135,-16.874032 7,-18 Q 7.763932,-19.236068 9,-20 Q 10.125968,-20.695886 12,-21 Q 13.777863,-21.288507 15,-21 Q 16.309017,-20.690983 17,-20 Q 17.690983,-19.309017 18,-18 Q 18.384677,-16.370484 18,-14 Q 17.84371,-13.036895 17,-11 Q 15.806814,-8.1193952 15,-7 Q 14.234589,-5.9380484 12,-4 Q 9.8822874,-2.1633176 8,-1 Q 6.618034,-0.14589803 6,0 Q 4.0890728,0.45110872 3,0 Q 2.2928932,-0.29289322 2,-1 Q 1.5857864,-2 2,-3 Q 2.2928932,-3.7071068 3,-4 Q 4.0890728,-4.4511087 6,-4 Q 6.9109272,-3.7849593 8,-3 Q 8.5811388,-2.5811388 9,-2 Q 9.7849593,-0.91092721 10,0 Q 10.288507,1.2221371 10,3 Q 9.8437096,3.9631048 9,6 Q 8.5994114,6.9671065 8,8 Q 6.5311289,10.531129 6,11 Q 4.7325556,12.118877 4,12 Q 3.372001,11.89809 3,11 Q 2.7668044,10.437016 3,9 Q 3.2320166,7.570249 4,6 Q 4.6793988,4.6108745 6,3 Q 7.3514707,1.3514707 9,0 Q 10.563458,-1.281729 12,-2 L 18,-5","advance":21},{"key":"[","d":"M 4,-25 L 4,7 M 5,-25 L 5,7 M 4,-25 L 11,-25 M 4,7 L 11,7","advance":14},{"key":"\\\\","d":"M 0,-21 L 14,3","advance":14},{"key":"]","d":"M 9,-25 L 9,7 M 10,-25 L 10,7 M 3,-25 L 10,-25 M 3,7 L 10,7","advance":14},{"key":"^","d":"M 8,-23 L 0,-9 M 8,-23 L 16,-9","advance":16},{"key":"_","d":"M 0,7 L 20,7","advance":20},{"key":"‘","d":"M 5,-16 Q 3.5857864,-15.414214 3,-14 Q 2.5857864,-13 3,-12 Q 3.4142136,-11 4,-11 Q 5,-11 5,-12 Q 5,-13 4,-13 Q 3,-13 3,-12","advance":8},{"key":"a","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 6.309017,-0.30901699 7,-1 Q 7.5,-1.5 8,-3 L 10,-9 L 9,-4 Q 8.5953718,-1.9768589 9,-1 Q 9.2928932,-0.29289322 10,0 Q 10.363024,0.15036957 11,0 Q 11.910927,-0.21504074 13,-1 Q 13.440449,-1.3174579 14,-2 Q 15.148529,-3.4009805 16,-5","advance":16},{"key":"b","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.5399223,-16.756292 2,-14 Q 1.2113543,-9.9739811 1,-7 Q 0.63603897,-1.8786797 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.3630243,0.15036957 3,0 Q 3.9109272,-0.21504074 5,-1 Q 6.3775802,-1.9929036 7,-3 Q 7.6958865,-4.125968 8,-6 Q 8.2434165,-7.5 8,-9 Q 7.9460321,-6.861508 9,-5 Q 9.4332814,-4.2347425 10,-4 Q 10.726049,-3.6992609 12,-4 Q 13.118034,-4.263932 14,-5","advance":14},{"key":"c","d":"M 7,-7 Q 7.2071068,-7.5 7,-8 Q 6.7071068,-8.7071068 6,-9 Q 5.2739515,-9.3007391 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4.6856967,0.39793901 6,0 Q 7.4342585,-0.43425855 9,-2 Q 10.3,-3.3 11,-5","advance":11},{"key":"d","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 6.309017,-0.30901699 7,-1 Q 7.5,-1.5 8,-3 L 14,-21 M 10,-9 L 9,-4 Q 8.5953718,-1.9768589 9,-1 Q 9.2928932,-0.29289322 10,0 Q 10.363024,0.15036957 11,0 Q 11.910927,-0.21504074 13,-1 Q 13.440449,-1.3174579 14,-2 Q 15.148529,-3.4009805 16,-5","advance":16},{"key":"e","d":"M 1,-2 Q 2.0811388,-2.3377223 3,-3 Q 3.5811388,-3.4188612 4,-4 Q 4.7849593,-5.0890728 5,-6 Q 5.3007391,-7.2739515 5,-8 Q 4.7071068,-8.7071068 4,-9 Q 3.6369757,-9.1503696 3,-9 Q 1.690983,-8.690983 1,-8 Q 0.30901699,-7.309017 0,-6 Q -0.35410197,-4.5 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 5.9109272,-0.21504074 7,-1 Q 7.4404493,-1.3174579 8,-2 Q 9.1485293,-3.4009805 10,-5","advance":10},{"key":"f","d":"M 0,-5 L 4,-10 Q 4.9433189,-11.179149 6,-13 Q 6.5994114,-14.032893 7,-15 Q 7.8437096,-17.036895 8,-18 Q 8.2331956,-19.437016 8,-20 Q 7.627999,-20.89809 7,-21 Q 6.1396204,-21.13962 5,-20 Q 4.3333333,-19.333333 4,-18 L 2,-10 Q 0.8,-5.2 -1,-1 L -4,6 Q -4.8258876,7.9270711 -5,9 Q -5.2331956,10.437016 -5,11 Q -4.627999,11.89809 -4,12 Q -3.0070463,12.161134 -2,11 Q -1.2353756,10.118381 -1,8 L 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.7260485,0.30073915 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.4404493,-1.3174579 6,-2 Q 7.1485293,-3.4009805 8,-5","advance":8},{"key":"g","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 5.9109272,-0.21504074 7,-1 Q 7.5811388,-1.4188612 8,-2 M 10,-9 L 8,-2 Q 6.5529061,3.0648285 4,9 Q 3.2452082,10.754792 3,11 Q 1.8603796,12.13962 1,12 Q 0.37200097,11.89809 0,11 Q -0.2331956,10.437016 0,9 Q 0.30411354,7.125968 1,6 Q 1.6772337,4.9042129 4,3 Q 5.5634581,1.718271 7,1 L 9,0 Q 10.436542,-0.71827095 12,-2 Q 13.648529,-3.3514707 15,-5","advance":15},{"key":"h","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.6161088,-16.962243 2,-14 Q 1.3734361,-10.987489 1,-8 L 0,0 Q 0.39339828,-1.5355339 1,-3 Q 1.4005886,-3.9671065 2,-5 Q 3.4688711,-7.5311289 4,-8 Q 4.8162246,-8.7205485 6,-9 Q 7.2739515,-9.3007391 8,-9 Q 8.7071068,-8.7071068 9,-8 Q 9.3693981,-7.1081942 9,-6 L 8,-3 Q 7.6306019,-1.8918058 8,-1 Q 8.2928932,-0.29289322 9,0 Q 9.3630243,0.15036957 10,0 Q 10.910927,-0.21504074 12,-1 Q 12.440449,-1.3174579 13,-2 Q 14.148529,-3.4009805 15,-5","advance":15},{"key":"i","d":"M 3,-14 Q 2.5,-13.5 3,-13 Q 3.5,-12.5 4,-13 Q 4.5,-13.5 4,-14 Q 3.5,-14.5 3,-14 Z M 0,-5 L 2,-9 L 0,-3 Q -0.36939806,-1.8918058 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.3630243,0.15036957 2,0 Q 2.9109272,-0.21504074 4,-1 Q 4.4404493,-1.3174579 5,-2 Q 6.1485293,-3.4009805 7,-5","advance":7},{"key":"j","d":"M 3,-14 Q 2.5,-13.5 3,-13 Q 3.5,-12.5 4,-13 Q 4.5,-13.5 4,-14 Q 3.5,-14.5 3,-14 Z M 0,-5 L 2,-9 L -4,9 Q -4.5,10.5 -5,11 Q -6.1396204,12.13962 -7,12 Q -7.627999,11.89809 -8,11 Q -8.2331956,10.437016 -8,9 Q -7.6958865,7.125968 -7,6 Q -6.3227663,4.9042129 -4,3 Q -2.4365419,1.718271 -1,1 L 1,0 Q 2.4365419,-0.71827095 4,-2 Q 5.6485293,-3.3514707 7,-5","advance":7},{"key":"k","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.6161088,-16.962243 2,-14 Q 1.3734361,-10.987489 1,-8 L 0,0 Q 0.39339828,-1.5355339 1,-3 Q 1.4005886,-3.9671065 2,-5 Q 3.4688711,-7.5311289 4,-8 Q 4.8162246,-8.7205485 6,-9 Q 7.2739515,-9.3007391 8,-9 Q 8.7071068,-8.7071068 9,-8 Q 9.4960013,-6.802547 9,-6 Q 8.618034,-5.381966 7,-5 Q 5.5,-4.645898 4,-5 Q 5.7071068,-4.8786797 6,-4 L 7,-1 Q 7.2265409,-0.32037724 8,0 Q 8.3630243,0.15036957 9,0 Q 9.9109272,-0.21504074 11,-1 Q 11.440449,-1.3174579 12,-2 Q 13.148529,-3.4009805 14,-5","advance":14},{"key":"l","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.5399223,-16.756292 2,-14 Q 1.2113543,-9.9739811 1,-7 Q 0.63603897,-1.8786797 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.3630243,0.15036957 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.4404493,-1.3174579 6,-2 Q 7.1485293,-3.4009805 8,-5","advance":8},{"key":"m","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 3.2674444,-9.1188774 4,-9 Q 4.627999,-8.8980898 5,-8 Q 5.0949008,-7.7708892 5,-7 Q 4.8793055,-6.019586 4,-3 Q 3.5576072,-1.4807976 3,0 M 4,-3 Q 4.4377423,-4.0311289 5,-5 Q 6.4688711,-7.5311289 7,-8 Q 7.8162246,-8.7205485 9,-9 Q 10.273951,-9.3007391 11,-9 Q 11.707107,-8.7071068 12,-8 Q 12.094901,-7.7708892 12,-7 Q 11.879306,-6.019586 11,-3 Q 10.557607,-1.4807976 10,0 M 11,-3 Q 11.437742,-4.0311289 12,-5 Q 13.468871,-7.5311289 14,-8 Q 14.816225,-8.7205485 16,-9 Q 17.273951,-9.3007391 18,-9 Q 18.707107,-8.7071068 19,-8 Q 19.369398,-7.1081942 19,-6 L 18,-3 Q 17.630602,-1.8918058 18,-1 Q 18.292893,-0.29289322 19,0 Q 19.363024,0.15036957 20,0 Q 20.910927,-0.21504074 22,-1 Q 22.440449,-1.3174579 23,-2 Q 24.148529,-3.4009805 25,-5","advance":25},{"key":"n","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 3.2674444,-9.1188774 4,-9 Q 4.627999,-8.8980898 5,-8 Q 5.0949008,-7.7708892 5,-7 Q 4.8793055,-6.019586 4,-3 Q 3.5576072,-1.4807976 3,0 M 4,-3 Q 4.4377423,-4.0311289 5,-5 Q 6.4688711,-7.5311289 7,-8 Q 7.8162246,-8.7205485 9,-9 Q 10.273951,-9.3007391 11,-9 Q 11.707107,-8.7071068 12,-8 Q 12.369398,-7.1081942 12,-6 L 11,-3 Q 10.630602,-1.8918058 11,-1 Q 11.292893,-0.29289322 12,0 Q 12.363024,0.15036957 13,0 Q 13.910927,-0.21504074 15,-1 Q 15.440449,-1.3174579 16,-2 Q 17.148529,-3.4009805 18,-5","advance":18},{"key":"o","d":"M 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 5.9109272,-0.21504074 7,-1 Q 7.5811388,-1.4188612 8,-2 Q 8.7849593,-3.0890728 9,-4 Q 9.236068,-5 9,-6 Q 8.690983,-7.309017 8,-8 Q 6.8603796,-9.1396204 6,-9 Q 5.372001,-8.8980898 5,-8 Q 4.6992609,-7.2739515 5,-6 Q 5.309017,-4.690983 6,-4 Q 6.690983,-3.309017 8,-3 Q 9.5,-2.645898 11,-3 Q 11.910927,-3.2150407 13,-4 Q 13.581139,-4.4188612 14,-5","advance":14},{"key":"p","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 2.5622577,-8.9688711 3,-10 Q 2.4354686,-7.3064058 2,-6 L -4,12 M 2,-6 Q 2.1666667,-7.1666667 3,-8 Q 3.690983,-8.690983 5,-9 Q 6,-9.236068 7,-9 Q 8.309017,-8.690983 9,-8 Q 9.690983,-7.309017 10,-6 Q 10.236068,-5 10,-4 Q 9.7849593,-3.0890728 9,-2 Q 8.5811388,-1.4188612 8,-1 Q 7.0811388,-0.33772234 6,0 M 2,-1 Q 2.881966,-0.26393202 4,0 Q 5.2221371,0.28850743 7,0 Q 7.9631048,-0.1562904 10,-1 Q 11.440302,-1.5965928 12,-2 Q 13.743416,-3.2565835 15,-5","advance":15},{"key":"q","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 6.118034,-0.26393202 7,-1 M 10,-9 Q 9.5440795,-7.4853068 9,-6 Q 8.1595457,-3.7056066 7,-1 L 4,6 Q 3.1741124,7.9270711 3,9 Q 2.7668044,10.437016 3,11 Q 3.372001,11.89809 4,12 Q 4.9929537,12.161134 6,11 Q 7,9.8469903 7,8 L 7,1 L 9,0 Q 10.436542,-0.71827095 12,-2 Q 13.648529,-3.3514707 15,-5","advance":15},{"key":"r","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 2.5622577,-8.9688711 3,-10 Q 1,-8 3,-8 L 6,-8 Q 6.5857864,-8 7,-7 Q 7.3693981,-6.1081942 7,-5 L 6,-2 Q 5.815301,-1.4459029 6,-1 Q 6.2928932,-0.29289322 7,0 Q 7.3630243,0.15036957 8,0 Q 8.9109272,-0.21504074 10,-1 Q 10.440449,-1.3174579 11,-2 Q 12.148529,-3.4009805 13,-5","advance":13},{"key":"s","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 2.5622577,-8.9688711 3,-10 Q 2.5835741,-8.6246388 3,-8 L 5,-5 Q 5.817256,-3.774116 6,-3 Q 6.3416408,-1.5527864 6,-1 Q 5.309017,0.11803399 4,0 M 0,-1 Q 0.88196601,-0.26393202 2,0 Q 4,0.47213595 6,0 Q 6.9109272,-0.21504074 8,-1 Q 8.4404493,-1.3174579 9,-2 Q 10.148529,-3.4009805 11,-5","advance":11},{"key":"t","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 3.1245155,-9.9377423 4,-12 M 7,-21 L 1,-3 Q 0.63060194,-1.8918058 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.7260485,0.30073915 4,0 Q 4.9109272,-0.21504074 6,-1 Q 6.4404493,-1.3174579 7,-2 Q 8.1485293,-3.4009805 9,-5 M 1,-13 L 8,-13","advance":9},{"key":"u","d":"M 0,-5 L 2,-9 L 0,-3 Q -0.36939806,-1.8918058 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.7260485,0.30073915 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.8808987,-1.6349159 7,-3 Q 8.1485293,-4.4009805 9,-6 M 10,-9 L 8,-3 Q 7.6306019,-1.8918058 8,-1 Q 8.2928932,-0.29289322 9,0 Q 9.3630243,0.15036957 10,0 Q 10.910927,-0.21504074 12,-1 Q 12.440449,-1.3174579 13,-2 Q 14.148529,-3.4009805 15,-5","advance":15},{"key":"v","d":"M 0,-5 L 2,-9 L 1,-4 Q 0.59537178,-1.9768589 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.281492,0.1165978 3,0 Q 4.874032,-0.30411354 6,-1 Q 7.236068,-1.763932 8,-3 Q 8.6958865,-4.125968 9,-6 Q 9.2434165,-7.5 9,-9 Q 8.9460321,-6.861508 10,-5 Q 10.433281,-4.2347425 11,-4 Q 11.726049,-3.6992609 13,-4 Q 14.118034,-4.263932 15,-5","advance":15},{"key":"w","d":"M 3,-9 Q 1.763932,-8.236068 1,-7 Q 0.30411354,-5.874032 0,-4 Q -0.19233829,-2.8147581 0,-2 Q 0.38196601,-0.38196601 1,0 Q 1.5527864,0.34164079 3,0 Q 3.9109272,-0.21504074 5,-1 Q 6.1622777,-1.8377223 7,-3 M 9,-9 L 7,-3 Q 6.6306019,-1.8918058 7,-1 Q 7.2928932,-0.29289322 8,0 Q 8.7260485,0.30073915 10,0 Q 10.910927,-0.21504074 12,-1 Q 13.37758,-1.9929036 14,-3 Q 14.695886,-4.125968 15,-6 Q 15.243416,-7.5 15,-9 Q 14.946032,-6.861508 16,-5 Q 16.433281,-4.2347425 17,-4 Q 17.726049,-3.6992609 19,-4 Q 20.118034,-4.263932 21,-5","advance":21},{"key":"x","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 2.8162246,-8.7205485 4,-9 Q 5.2739515,-9.3007391 6,-9 Q 7,-8.5857864 7,-8 L 7,-1 Q 7,-0.41421356 8,0 Q 9.2668628,0.52475173 11,0 Q 12.434259,-0.43425855 14,-2 Q 15.3,-3.3 16,-5 M 13,-8 Q 12.707107,-8.7071068 12,-9 Q 11,-9.4142136 10,-9 Q 9.438533,-8.7674328 9,-8 L 5,-1 Q 4.561467,-0.23256725 4,0 Q 3,0.41421356 2,0 Q 1.2928932,-0.29289322 1,-1","advance":16},{"key":"y","d":"M 0,-5 L 2,-9 L 0,-3 Q -0.36939806,-1.8918058 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.7260485,0.30073915 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.8808987,-1.6349159 7,-3 Q 8.1485293,-4.4009805 9,-6 M 10,-9 L 4,9 Q 3.5,10.5 3,11 Q 1.8603796,12.13962 1,12 Q 0.37200097,11.89809 0,11 Q -0.2331956,10.437016 0,9 Q 0.30411354,7.125968 1,6 Q 1.6772337,4.9042129 4,3 Q 5.5634581,1.718271 7,1 L 9,0 Q 10.436542,-0.71827095 12,-2 Q 13.648529,-3.3514707 15,-5","advance":15},{"key":"z","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 2.8162246,-8.7205485 4,-9 Q 5.2739515,-9.3007391 6,-9 Q 7.4142136,-8.4142136 8,-7 Q 8.3007391,-6.2739515 8,-5 Q 7.7849593,-4.0890728 7,-3 Q 6.0070964,-1.6224198 5,-1 Q 3.618034,-0.14589803 2,0 Q 3.1666667,0.16666667 4,1 Q 4.690983,1.690983 5,3 Q 5.2885074,4.2221371 5,6 Q 4.8437096,6.9631048 4,9 Q 3.2928932,10.707107 3,11 Q 1.8603796,12.13962 1,12 Q 0.37200097,11.89809 0,11 Q -0.2331956,10.437016 0,9 Q 0.30411354,7.125968 1,6 Q 2.0511187,4.2992542 4,3 L 7,1 Q 9.3385564,-0.55903758 11,-2 Q 12.606602,-3.3933983 14,-5","advance":14},{"key":"{","d":"M 9,-25 Q 7.9188612,-24.662278 7,-24 Q 6.4188612,-23.581139 6,-23 Q 5.2150407,-21.910927 5,-21 Q 4.763932,-20 5,-19 Q 5.309017,-17.690983 6,-17 L 7,-16 Q 7.690983,-15.309017 8,-14 Q 8.3007391,-12.726049 8,-12 Q 7.4142136,-10.585786 6,-10 M 7,-24 Q 6.263932,-23.118034 6,-22 Q 5.763932,-21 6,-20 Q 6.309017,-18.690983 7,-18 L 8,-17 Q 8.690983,-16.309017 9,-15 Q 9.236068,-14 9,-13 Q 8.690983,-11.690983 8,-11 Q 6.3333333,-9.3333333 4,-9 Q 6.3333333,-8.6666667 8,-7 Q 8.690983,-6.309017 9,-5 Q 9.236068,-4 9,-3 Q 8.690983,-1.690983 8,-1 L 7,0 Q 6.309017,0.69098301 6,2 Q 5.763932,3 6,4 Q 6.263932,5.118034 7,6 M 6,-8 Q 7.4142136,-7.4142136 8,-6 Q 8.3007391,-5.2739515 8,-4 Q 7.690983,-2.690983 7,-2 L 6,-1 Q 5.309017,-0.30901699 5,1 Q 4.763932,2 5,3 Q 5.2150407,3.9109272 6,5 Q 6.4188612,5.5811388 7,6 Q 7.9188612,6.6622777 9,7","advance":14},{"key":"|","d":"M 4,-25 L 4,7","advance":8},{"key":"}","d":"M 5,-25 Q 6.0811388,-24.662278 7,-24 Q 7.5811388,-23.581139 8,-23 Q 8.7849593,-21.910927 9,-21 Q 9.236068,-20 9,-19 Q 8.690983,-17.690983 8,-17 L 7,-16 Q 6.309017,-15.309017 6,-14 Q 5.6992609,-12.726049 6,-12 Q 6.5857864,-10.585786 8,-10 M 7,-24 Q 7.736068,-23.118034 8,-22 Q 8.236068,-21 8,-20 Q 7.690983,-18.690983 7,-18 L 6,-17 Q 5.309017,-16.309017 5,-15 Q 4.763932,-14 5,-13 Q 5.309017,-11.690983 6,-11 Q 7.6666667,-9.3333333 10,-9 Q 7.6666667,-8.6666667 6,-7 Q 5.309017,-6.309017 5,-5 Q 4.763932,-4 5,-3 Q 5.309017,-1.690983 6,-1 L 7,0 Q 7.690983,0.69098301 8,2 Q 8.236068,3 8,4 Q 7.736068,5.118034 7,6 M 8,-8 Q 6.5857864,-7.4142136 6,-6 Q 5.6992609,-5.2739515 6,-4 Q 6.309017,-2.690983 7,-2 L 8,-1 Q 8.690983,-0.30901699 9,1 Q 9.236068,2 9,3 Q 8.7849593,3.9109272 8,5 Q 7.5811388,5.5811388 7,6 Q 6.0811388,6.6622777 5,7","advance":14},{"key":"~","d":"M 3,-6 Q 2.8377223,-7 3,-8 Q 3.3687146,-10.272122 4,-11 Q 4.575679,-11.663763 6,-12 Q 7,-12.236068 8,-12 Q 8.9728913,-11.770332 10,-11 L 14,-8 Q 15.027109,-7.2296685 16,-7 Q 17,-6.763932 18,-7 Q 19.309017,-7.309017 20,-8 Q 20.833333,-8.8333333 21,-10 M 3,-8 Q 3.1666667,-9.1666667 4,-10 Q 4.690983,-10.690983 6,-11 Q 7,-11.236068 8,-11 Q 8.9728913,-10.770332 10,-10 L 14,-7 Q 15.027109,-6.2296685 16,-6 Q 17,-5.763932 18,-6 Q 19.424321,-6.3362366 20,-7 Q 20.631285,-7.7278782 21,-10 Q 21.162278,-11 21,-12","advance":24},{"key":"▮","d":"M 0,-21 L 0,0 Q 0.5,0.5 1,0 L 1,-21 Q 1.5,-21.5 2,-21 L 2,0 Q 2.5,0.5 3,0 L 3,-21 Q 3.5,-21.5 4,-21 L 4,0 Q 4.5,0.5 5,0 L 5,-21 Q 5.5,-21.5 6,-21 L 6,0 Q 6.5,0.5 7,0 L 7,-21 Q 7.5,-21.5 8,-21 L 8,0 Q 8.5,0.5 9,0 L 9,-21 Q 9.5,-21.5 10,-21 L 10,0 Q 10.5,0.5 11,0 L 11,-21 Q 11.5,-21.5 12,-21 L 12,0 Q 12.5,0.5 13,0 L 13,-21 Q 13.5,-21.5 14,-21 L 14,0 Q 14.5,0.5 15,0 L 15,-21 Q 15.5,-21.5 16,-21 L 16,0","advance":16}]'),i2={top:Y0,bottom:K0,spaceWidth:t2,strokeWidth:e2,kerning:n2,mHeight:r2,letters:s2};class F1{constructor(e,n,r,s,o,i,a){this.top=e,this.bottom=n,this.spaceWidth=r,this.strokeWidth=s,this.kerning=o,this.mHeight=i,this.#t=new Map(a)}getWord(e){const n=[];for(const r of e){const s=this.getChar(r);s&&n.push(s)}return n}#t;getChar(e){return this.#t.get(e)}static fromJSON(e){typeof e=="string"&&(e=JSON.parse(e));const n=e.top,r=e.bottom,s=e.spaceWidth,o=e.strokeWidth,i=e.kerning,a=e.mHeight;b.assertFinite(n,r,s,o,i,a);const c=new this(n,r,s,o,i,a,[]);return b.assertClass(e.letters,Array).forEach(l=>{const u=l.key,d=l.advance,f=l.d;if(b.assertFinite(d),typeof u!="string"||typeof f!="string")throw console.error("Expecting {key,advance,d}, found",l),new Error("wtf");const y={shape:N.fromString(f),advance:d};c.#t.set(u,y)}),c}resize(e){const n=e/this.mHeight;if(n==1)return this;const r=new F1(n*this.top,n*this.bottom,n*this.spaceWidth,n*this.strokeWidth,n*this.kerning,e,[]),s=new DOMMatrix;return s.scaleSelf(n),this.#t.forEach((o,i)=>{const a={advance:n*o.advance,shape:o.shape.transform(s)};r.#t.set(i,a)}),r}static cursive(e){return this.fromJSON(i2).resize(e)}static futuraL(e){return this.fromJSON(B0).resize(e)}}function x1(...Q){const e=document.createElementNS("http://www.w3.org/2000/svg","g");e.classList.add("handwriting");const n=[];let r=.01;Q.forEach(a=>{const c=new Array;a.splitOnMove().forEach(l=>{const u=l.makeElement();c.push(u),e.appendChild(u);const d=r,f=l.getLength();r=d+f,u.style.setProperty("--offset",d.toString()),u.style.setProperty("--length",f.toString())}),n.push(c)});const s=r;function o(a){const c=a*s;e.style.setProperty("--total-position",c.toString())}function i(a){const c=a.duration,h=a.delayBefore??0,l=a.delayAfter??0,u=h+c+l,d=b.makeLinear(h,0,h+c,s);return{show(f){const y=d(f);e.style.setProperty("--total-position",y.toString())},endTime:u}}return{topElement:e,allPaths:n,show:o,totalLength:s,makeShowable:i}}class o2{constructor(e,n){this.source=n,this.#t=e,window.showFrame=r=>{this.show(r)},window.initScreenCapture=this.initScreenCapture.bind(this),window.MainAnimation=this,setTimeout(()=>{if(this.#e)return;let r=NaN;this.#n=new g1.AnimationLoop(s=>{isNaN(r)&&(r=s);const o=s-r;this.show(o)})},1)}#t;show(e){this.#t.show(e)}get endTime(){return this.#t.endTime}initScreenCapture(e){return document.querySelectorAll("[data-hideBeforeScreenshot]").forEach(n=>{if(!(n instanceof SVGElement||n instanceof HTMLElement))throw new Error("wtf");n.style.display="none"}),this.disableAnimationLoop(),{source:this.source,script:e,seconds:this.#t.endTime/1e3,devicePixelRatio}}#e=!1;#n;disableAnimationLoop(){this.#e=!0,this.#n?.cancel()}}function I1(Q){Q=[...Q];const e=Math.max(...Q.map(r=>r.endTime));function n(r){Q.forEach(s=>s.show(r))}return{endTime:e,show:n}}function N1(Q){Q=[...Q];let e=0;const n=Q.map(o=>{const i={start:e,showable:o};return e+=o.endTime,i}),r=e;function s(o){n.forEach(({start:i,showable:a})=>a.show(o-i))}return{endTime:r,show:s}}function Q0(Q){Q=[...Q];let e=0;Q.map(s=>{const o={start:e,showable:s};return e+=s.endTime,o});const n=e;function r(s){const o=Q.length-1;for(let i=0;i<=o;i++){const{show:a,endTime:c}=Q[i];if(i==o||s<c){a(s);return}s-=c}}return{endTime:n,show:r}}const M1=g1.getById("main",SVGSVGElement),v1=[],T1=F1.cursive(2/3);function _1(Q,e,n){const i=new U0(T1);i.addText(Q);const c=i.align().singlePathShape(),h=x1(c);M1.append(h.topElement),h.topElement.classList.add(e);const l=T1.bottom-T1.top;return h.topElement.style.transform=`translateY(${l*(n+1)}px) translateX(${l*.5}px)`,h.makeShowable({duration:2500,delayAfter:1e3,delayBefore:500})}function w1(Q,e=1){function n(){let h=0;for(let l=0;l<Q;l++)h=2+3*h;return 1/h}const r=n();function s(h,l,u){if(h==0)return"";const d=h-1,f=` v ${r*(l?-1:1)}`,y=` v ${r*(l?1:-1)}`,p=` h ${r*(u?1:-1)}`;let g="";return g+=s(d,l,u),g+=f,g+=s(d,l,!u),g+=f,g+=s(d,l,u),g+=p,g+=s(d,!l,u),g+=y,g+=s(d,!l,!u),g+=y,g+=s(d,!l,u),g+=p,g+=s(d,l,u),g+=f,g+=s(d,l,!u),g+=f,g+=s(d,l,u),g}const o="M 0 1"+s(Q,!0,!0),i=N.fromString(o).commands,a=new Array;i.forEach(h=>{if(!(h instanceof D))throw new Error("wtf");const l=a.at(-1);if(l!=null&&l.outgoingAngle==h.incomingAngle){const u=new D(l.x0,l.y0,h.x,h.y);a.pop(),a.push(u)}else a.push(h)});const c=new N(a);if(c.splitOnMove().length>1)throw new Error("wtf");return c}window.createPeanoPath=w1;{const Q=w1(1),e=x1(Q);e.topElement.id="peano-1-main",M1.append(e.topElement);const n=e.makeShowable({duration:2e3}),r=_1(`First iteration
of Peano curve`,"iteration-1-text",0),s=I1([n,r]);v1.push(s)}{let Q=function(){const i=g1.querySelector(":scope *",SVGPathElement,n.topElement).style;function a(){i.strokeDashoffset="",i.strokeDasharray=""}function c(){i.strokeDashoffset="0",i.strokeDasharray="1 0.125"}function h(){i.strokeDashoffset="0",i.strokeDasharray="1 1.25"}function l(){i.strokeDashoffset="1.125",i.strokeDasharray="1 1.25"}return Q0([{show:a,endTime:1e3},{show:c,endTime:2e3},{show:h,endTime:2e3},{show:l,endTime:2e3},{show:c,endTime:2e3},{show:a,endTime:1e3}])};const e=w1(2),n=x1(e);n.topElement.id="peano-2-main",M1.append(n.topElement);const r=n.makeShowable({duration:6e3}),s=_1("Second iteration","iteration-2-text",3),o=I1([N1([r,Q()]),s]);v1.push(o)}{let Q=function(){const i=g1.querySelector(":scope *",SVGPathElement,n.topElement).style;function a(){i.strokeDashoffset="",i.strokeDasharray=""}function c(){i.strokeDashoffset="0",i.strokeDasharray=`${.3076923076923077} ${.38461538461538464}`}function h(){i.strokeDashoffset=`${.34615384615384615}`,i.strokeDasharray=`${.3076923076923077} ${.38461538461538464}`}function l(){i.strokeDashoffset="0",i.strokeDasharray=`${.3076923076923077} ${.038461538461538464}`}function u(){i.strokeDashoffset="0",i.strokeDasharray=`${3.076923076923077} ${.038461538461538464}`}function d(){i.strokeDashoffset="0",i.strokeDasharray=`${3.076923076923077} ${3.1538461538461537}`}function f(){i.strokeDashoffset=`${3.1153846153846154}`,i.strokeDasharray=`${3.076923076923077} ${3.1538461538461537}`}return Q0([{show:a,endTime:1e3},{show:l,endTime:1e3},{show:c,endTime:2e3},{show:l,endTime:1e3},{show:h,endTime:2e3},{show:l,endTime:1e3},{show:u,endTime:1e3},{show:d,endTime:2e3},{show:u,endTime:1e3},{show:f,endTime:2e3},{show:u,endTime:1e3},{show:a,endTime:1e3}])};const e=w1(3),n=x1(e);n.topElement.id="peano-3-main",M1.append(n.topElement);const r=n.makeShowable({duration:18e3}),s=_1("Third iteration","iteration-3-text",5),o=I1([N1([r,Q()]),s]);v1.push(o)}new o2(N1(v1),"peano-vs-fourier");
